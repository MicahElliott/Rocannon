" Auto-generated by txt2optargs.vim
let optargs = {
  \ 'a10_server': [
      \  {'word': 'server_ip=', 'menu': 'slb server IP address'},
      \  {'word': 'server_ports=', 'menu': 'A list of ports to create for the server. Each list item should be a dictionary which specifies the `port:'' and `protocol:'', but can also optionally specify the `status:''. See the examples below for details. This parameter is required when `state'' is `present''.'},
      \  {'word': 'server_status=', 'menu': 'slb virtual server status'},
      \  {'word': 'state=', 'menu': 'create, update or remove slb server'},
  \ ],
  \ 'a10_service_group': [
      \  {'word': 'servers=', 'menu': 'A list of servers to add to the service group. Each list item should be a dictionary which specifies the `server:'' and `port:'', but can also optionally specify the `status:''. See the examples below for details.'},
      \  {'word': 'service_group_method=', 'menu': 'slb service-group loadbalancing method'},
      \  {'word': 'service_group_protocol=', 'menu': 'slb service-group protocol'},
      \  {'word': 'validate_certs=', 'menu': 'If `no'', SSL certificates will not be validated. This should only be used on personally controlled devices using self-signed certificates.'},
      \  {'word': 'write_config=', 'menu': 'If `yes'', any changes will cause a write of the running configuration to non-volatile memory. This will save `all'' configuration changes, including those that may have been made manually or through other modules, so care should be taken when specifying `yes''.'},
  \ ],
  \ 'a10_virtual_server': [
      \  {'word': 'validate_certs=', 'menu': 'If `no'', SSL certificates will not be validated. This should only be used on personally controlled devices using self-signed certificates.'},
      \  {'word': 'virtual_server_ip=', 'menu': 'slb virtual server ip address'},
      \  {'word': 'virtual_server_ports=', 'menu': 'A list of ports to create for the virtual server. Each list item should be a dictionary which specifies the `port:'' and `type:'', but can also optionally specify the `service_group:'' as well as the `status:''. See the examples below for details. This parameter is required when `state'' is `present''.'},
      \  {'word': 'virtual_server_status=', 'menu': 'slb virtual server status'},
      \  {'word': 'write_config=', 'menu': 'If `yes'', any changes will cause a write of the running configuration to non-volatile memory. This will save `all'' configuration changes, including those that may have been made manually or through other modules, so care should be taken when specifying `yes''.'},
  \ ],
  \ 'acl': [
      \  {'word': 'default=', 'menu': 'if the target is a directory, setting this to yes will make it the default acl for entities created inside the directory. It causes an error if name is a file.'},
      \  {'word': 'entity=', 'menu': 'actual user or group that the ACL applies to when matching entity types user or group are selected.'},
      \  {'word': 'entry=', 'menu': 'DEPRECATED. The acl to set or remove.  This must always be quoted in the form of ''<etype>:<qualifier>:<perms>''.  The qualifier may be empty for some types, but the type and perms are always requried. ''-'' can be used as placeholder when you do not care about permissions. This is now superseded by entity, type and permissions fields.'},
      \  {'word': 'etype=', 'menu': 'the entity type of the ACL to apply, see setfacl documentation for more info.'},
      \  {'word': 'follow=', 'menu': 'whether to follow symlinks on the path if a symlink is encountered.'},
      \  {'word': 'permissions=', 'menu': 'Permissions to apply/remove can be any combination of r, w and  x (read, write and execute respectively)'},
      \  {'word': 'state=', 'menu': 'defines whether the ACL should be present or not.  The `query'' state gets the current acl without changing it, for use in ''register'' operations.'},
  \ ],
  \ 'add_host': [
      \  {'word': 'groups=', 'menu': 'The groups to add the hostname to, comma separated.'},
  \ ],
  \ 'airbrake_deployment': [
      \  {'word': 'repo=', 'menu': 'URL of the project repository'},
      \  {'word': 'revision=', 'menu': 'A hash, number, tag, or other identifier showing what revision was deployed'},
      \  {'word': 'url=', 'menu': 'Optional URL to submit the notification to. Use to send notifications to Airbrake-compliant tools like Errbit.'},
      \  {'word': 'user=', 'menu': 'The username of the person doing the deployment'},
      \  {'word': 'validate_certs=', 'menu': 'If `no'', SSL certificates for the target url will not be validated. This should only be used on personally controlled sites using self-signed certificates.'},
  \ ],
  \ 'alternatives': [
      \  {'word': 'link=', 'menu': 'The path to the symbolic link that should point to the real executable.'},
  \ ],
  \ 'apache2_module': [
      \  {'word': 'state=', 'menu': 'indicate the desired state of the resource'},
  \ ],
  \ 'apt': [
      \  {'word': 'cache_valid_time=', 'menu': 'If `update_cache'' is specified and the last run is less or equal than `cache_valid_time'' seconds ago, the `update_cache'' gets skipped.'},
      \  {'word': 'deb=', 'menu': 'Path to a .deb package on the remote machine.'},
      \  {'word': 'default_release=', 'menu': 'Corresponds to the `-t'' option for `apt'' and sets pin priorities'},
      \  {'word': 'dpkg_options=', 'menu': 'Add dpkg options to apt command. Defaults to ''-o "Dpkg::Options::=--force-confdef" -o "Dpkg::Options::=--force-confold"'' Options should be supplied as comma separated list'},
      \  {'word': 'force=', 'menu': 'If `yes'', force installs/removes.'},
      \  {'word': 'install_recommends=', 'menu': 'Corresponds to the `--no-install-recommends'' option for `apt''. Default behavior (`yes'') replicates apt''s default behavior; `no'' does not install recommended packages. Suggested packages are never installed.'},
      \  {'word': 'name=', 'menu': 'A package name, like `foo'', or package specifier with version, like `foo=1.0''. Name wildcards (fnmatch) like `apt*'' and version wildcards like `foo=1.0*'' are also supported.'},
      \  {'word': 'purge=', 'menu': 'Will force purging of configuration files if the module state is set to `absent''.'},
      \  {'word': 'state=', 'menu': 'Indicates the desired package state. `latest'' ensures that the latest version is installed.'},
      \  {'word': 'update_cache=', 'menu': 'Run the equivalent of `apt-get update'' before the operation. Can be run as part of the package installation or as a separate step.'},
      \  {'word': 'upgrade=', 'menu': 'If yes or safe, performs an aptitude safe-upgrade. If full, performs an aptitude full-upgrade. If dist, performs an apt-get dist-upgrade. Note: This does not upgrade a specific package, use state=latest for that.'},
  \ ],
  \ 'apt_key': [
      \  {'word': 'data=', 'menu': 'keyfile contents'},
      \  {'word': 'file=', 'menu': 'keyfile path'},
      \  {'word': 'id=', 'menu': 'identifier of key'},
      \  {'word': 'keyring=', 'menu': 'path to specific keyring file in /etc/apt/trusted.gpg.d'},
      \  {'word': 'keyserver=', 'menu': 'keyserver to retrieve key from.'},
      \  {'word': 'state=', 'menu': 'used to specify if key is being added or revoked'},
      \  {'word': 'url=', 'menu': 'url to retrieve key from.'},
      \  {'word': 'validate_certs=', 'menu': 'If `no'', SSL certificates for the target url will not be validated. This should only be used on personally controlled sites using self-signed certificates.'},
  \ ],
  \ 'apt_repository': [
      \  {'word': 'mode=', 'menu': 'The octal mode for newly created files in sources.list.d'},
      \  {'word': 'state=', 'menu': 'A source string state.'},
      \  {'word': 'update_cache=', 'menu': 'Run the equivalent of `apt-get update'' when a change occurs.  Cache updates are run after making changes.'},
      \  {'word': 'validate_certs=', 'menu': 'If `no'', SSL certificates for the target repo will not be validated. This should only be used on personally controlled sites using self-signed certificates.'},
  \ ],
  \ 'apt_rpm': [
      \  {'word': 'state=', 'menu': 'Indicates the desired package state'},
      \  {'word': 'update_cache=', 'menu': 'update the package database first `apt-get update''.'},
  \ ],
  \ 'assemble': [
      \  {'word': 'backup=', 'menu': 'Create a backup file (if `yes''), including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.'},
      \  {'word': 'delimiter=', 'menu': 'A delimiter to separate the file contents.'},
      \  {'word': 'follow=', 'menu': 'This flag indicates that filesystem links, if they exist, should be followed.'},
      \  {'word': 'group=', 'menu': 'name of the group that should own the file/directory, as would be fed to `chown'''},
      \  {'word': 'mode=', 'menu': 'mode the file or directory should be, such as 0644 as would be fed to `chmod''. As of version 1.8, the mode may be specified as a symbolic mode (for example, `u+rwx'' or `u=rw,g=r,o=r'').'},
      \  {'word': 'owner=', 'menu': 'name of the user that should own the file/directory, as would be fed to `chown'''},
      \  {'word': 'regexp=', 'menu': 'Assemble files only if `regex'' matches the filename. If not set, all files are assembled. All "\" (backslash) must be escaped as "\\" to comply yaml syntax. Uses Python regular expressions; see http://docs.python.org/2/library/re.html.'},
      \  {'word': 'remote_src=', 'menu': 'If False, it will search for src at originating/master machine, if True it will go to the remote/target machine for the src. Default is True.'},
      \  {'word': 'selevel=', 'menu': 'level part of the SELinux file context. This is the MLS/MCS attribute, sometimes known as the `range''. `_default'' feature works as for `seuser''.'},
      \  {'word': 'serole=', 'menu': 'role part of SELinux file context, `_default'' feature works as for `seuser''.'},
      \  {'word': 'setype=', 'menu': 'type part of SELinux file context, `_default'' feature works as for `seuser''.'},
      \  {'word': 'seuser=', 'menu': 'user part of SELinux file context. Will default to system policy, if applicable. If set to `_default'', it will use the `user'' portion of the policy if available'},
  \ ],
  \ 'assert': [
  \ ],
  \ 'at': [
      \  {'word': 'command=', 'menu': 'A command to be executed in the future.'},
      \  {'word': 'script_file=', 'menu': 'An existing script file to be executed in the future.'},
      \  {'word': 'state=', 'menu': 'The state dictates if the command or script file should be evaluated as present(added) or absent(deleted).'},
      \  {'word': 'unique=', 'menu': 'If a matching job is present a new job will not be added.'},
  \ ],
  \ 'authorized_key': [
      \  {'word': 'key_options=', 'menu': 'A string of ssh key options to be prepended to the key in the authorized_keys file'},
      \  {'word': 'manage_dir=', 'menu': 'Whether this module should manage the directory of the authorized key file.  If set, the module will create the directory, as well as set the owner and permissions of an existing directory. Be sure to set `manage_dir=no'' if you are using an alternate directory for authorized_keys, as set with `path'', since you could lock yourself out of SSH access. See the example below.'},
      \  {'word': 'path=', 'menu': 'Alternate path to the authorized_keys file'},
      \  {'word': 'state=', 'menu': 'Whether the given key (with the given key_options) should or should not be in the file'},
  \ ],
  \ 'azure': [
      \  {'word': 'endpoints=', 'menu': 'a comma-separated list of TCP ports to expose on the virtual machine (e.g., "22,80")'},
      \  {'word': 'hostname=', 'menu': 'hostname to write /etc/hostname. Defaults to <name>.cloudapp.net.'},
      \  {'word': 'management_cert_path=', 'menu': 'path to an azure management certificate associated with the subscription id. Overrides the AZURE_CERT_PATH environement variable.'},
      \  {'word': 'password=', 'menu': 'the unix password for the new virtual machine.'},
      \  {'word': 'role_size=', 'menu': 'azure role size for the new virtual machine (e.g., Small, ExtraLarge, A6)'},
      \  {'word': 'ssh_cert_path=', 'menu': 'path to an X509 certificate containing the public ssh key to install in the virtual machine. See http://www.windowsazure.com/en-us/manage/linux/tutorials/intro-to-linux/ for more details. if this option is specified, password-based ssh authentication will be disabled.'},
      \  {'word': 'state=', 'menu': 'create or terminate instances'},
      \  {'word': 'subscription_id=', 'menu': 'azure subscription id. Overrides the AZURE_SUBSCRIPTION_ID environement variable.'},
      \  {'word': 'user=', 'menu': 'the unix username for the new virtual machine.'},
      \  {'word': 'virtual_network_name=', 'menu': 'Name of virtual network.'},
      \  {'word': 'wait=', 'menu': 'wait for the instance to be in state ''running'' before returning'},
      \  {'word': 'wait_timeout=', 'menu': 'how long before wait gives up, in seconds'},
      \  {'word': 'wait_timeout_redirects=', 'menu': 'how long before wait gives up for redirects, in seconds'},
  \ ],
  \ 'bigip_facts': [
      \  {'word': 'filter=', 'menu': 'Shell-style glob matching string used to filter fact keys. Not applicable for software and system_info fact categories.'},
      \  {'word': 'session=', 'menu': 'BIG-IP session support; may be useful to avoid concurrency issues in certain circumstances.'},
  \ ],
  \ 'bigip_monitor_http': [
      \  {'word': 'interval=', 'menu': 'The interval specifying how frequently the monitor instance of this template will run. By default, this interval is used for up and down states. The default API setting is 5.'},
      \  {'word': 'ip=', 'menu': 'IP address part of the ipport definition. The default API setting is "0.0.0.0".'},
      \  {'word': 'parent=', 'menu': 'The parent template of this monitor template'},
      \  {'word': 'parent_partition=', 'menu': 'Partition for the parent monitor'},
      \  {'word': 'partition=', 'menu': 'Partition for the monitor'},
      \  {'word': 'port=', 'menu': 'port address part op the ipport definition. The default API setting is 0.'},
      \  {'word': 'state=', 'menu': 'Monitor state'},
      \  {'word': 'time_until_up=', 'menu': 'Specifies the amount of time in seconds after the first successful response before a node will be marked up. A value of 0 will cause a node to be marked up immediately after a valid response is received from the node. The default API setting is 0.'},
      \  {'word': 'timeout=', 'menu': 'The number of seconds in which the node or service must respond to the monitor request. If the target responds within the set time period, it is considered up. If the target does not respond within the set time period, it is considered down. You can change this number to any number you want, however, it should be 3 times the interval number of seconds plus 1 second. The default API setting is 16.'},
  \ ],
  \ 'bigip_monitor_tcp': [
      \  {'word': 'interval=', 'menu': 'The interval specifying how frequently the monitor instance of this template will run. By default, this interval is used for up and down states. The default API setting is 5.'},
      \  {'word': 'ip=', 'menu': 'IP address part of the ipport definition. The default API setting is "0.0.0.0".'},
      \  {'word': 'parent=', 'menu': 'The parent template of this monitor template'},
      \  {'word': 'parent_partition=', 'menu': 'Partition for the parent monitor'},
      \  {'word': 'partition=', 'menu': 'Partition for the monitor'},
      \  {'word': 'port=', 'menu': 'port address part op the ipport definition. The default API setting is 0.'},
      \  {'word': 'state=', 'menu': 'Monitor state'},
      \  {'word': 'time_until_up=', 'menu': 'Specifies the amount of time in seconds after the first successful response before a node will be marked up. A value of 0 will cause a node to be marked up immediately after a valid response is received from the node. The default API setting is 0.'},
      \  {'word': 'timeout=', 'menu': 'The number of seconds in which the node or service must respond to the monitor request. If the target responds within the set time period, it is considered up. If the target does not respond within the set time period, it is considered down. You can change this number to any number you want, however, it should be 3 times the interval number of seconds plus 1 second. The default API setting is 16.'},
      \  {'word': 'type=', 'menu': 'The template type of this monitor template'},
  \ ],
  \ 'bigip_node': [
      \  {'word': 'description=', 'menu': 'Node description.'},
      \  {'word': 'name=', 'menu': 'Node name'},
      \  {'word': 'partition=', 'menu': 'Partition'},
  \ ],
  \ 'bigip_pool': [
      \  {'word': 'host=', 'menu': 'Pool member IP'},
      \  {'word': 'lb_method=', 'menu': 'Load balancing method'},
      \  {'word': 'monitor_type=', 'menu': 'Monitor rule type when monitors > 1'},
      \  {'word': 'monitors=', 'menu': 'Monitor template name list. Always use the full path to the monitor.'},
      \  {'word': 'partition=', 'menu': 'Partition of pool/pool member'},
      \  {'word': 'port=', 'menu': 'Pool member port'},
      \  {'word': 'quorum=', 'menu': 'Monitor quorum value when monitor_type is m_of_n'},
      \  {'word': 'service_down_action=', 'menu': 'Sets the action to take when node goes down in pool'},
      \  {'word': 'slow_ramp_time=', 'menu': 'Sets the ramp-up time (in seconds) to gradually ramp up the load on newly added or freshly detected up pool members'},
      \  {'word': 'state=', 'menu': 'Pool/pool member state'},
  \ ],
  \ 'bigip_pool_member': [
      \  {'word': 'connection_limit=', 'menu': 'Pool member connection limit. Setting this to 0 disables the limit.'},
      \  {'word': 'description=', 'menu': 'Pool member description'},
      \  {'word': 'partition=', 'menu': 'Partition'},
      \  {'word': 'rate_limit=', 'menu': 'Pool member rate limit (connections-per-second). Setting this to 0 disables the limit.'},
      \  {'word': 'ratio=', 'menu': 'Pool member ratio weight. Valid values range from 1 through 100. New pool members -- unless overriden with this value -- default to 1.'},
  \ ],
  \ 'bigpanda': [
      \  {'word': 'description=', 'menu': 'Free text description of the deployment.'},
      \  {'word': 'env=', 'menu': 'The environment name, typically ''production'', ''staging'', etc.'},
      \  {'word': 'hosts=', 'menu': 'Name of affected host name. Can be a list.'},
      \  {'word': 'owner=', 'menu': 'The person responsible for the deployment.'},
      \  {'word': 'url=', 'menu': 'Base URL of the API server.'},
      \  {'word': 'validate_certs=', 'menu': 'If `no'', SSL certificates for the target url will not be validated. This should only be used on personally controlled sites using self-signed certificates.'},
  \ ],
  \ 'boundary_meter': [
      \  {'word': 'state=', 'menu': 'Whether to create or remove the client from boundary'},
      \  {'word': 'validate_certs=', 'menu': 'If `no'', SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.'},
  \ ],
  \ 'bzr': [
      \  {'word': 'executable=', 'menu': 'Path to bzr executable to use. If not supplied, the normal mechanism for resolving binary paths will be used.'},
      \  {'word': 'force=', 'menu': 'If `yes'', any modified files in the working tree will be discarded.'},
      \  {'word': 'version=', 'menu': 'What version of the branch to clone.  This can be the bzr revno or revid.'},
  \ ],
  \ 'campfire': [
      \  {'word': 'notify=', 'menu': 'Send a notification sound before the message.'},
  \ ],
  \ 'capabilities': [
      \  {'word': 'state=', 'menu': 'Whether the entry should be present or absent in the file''s capabilities.'},
  \ ],
  \ 'cloudformation': [
      \  {'word': 'aws_access_key=', 'menu': 'AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used.'},
      \  {'word': 'aws_secret_key=', 'menu': 'AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used.'},
      \  {'word': 'disable_rollback=', 'menu': 'If a stacks fails to form, rollback will remove the stack'},
      \  {'word': 'region=', 'menu': 'The AWS region to use. If not specified then the value of the EC2_REGION environment variable, if any, is used.'},
      \  {'word': 'tags=', 'menu': 'Dictionary of tags to associate with stack and it''s resources during stack creation. Cannot be updated later. Requires at least Boto version 2.6.0.'},
      \  {'word': 'template_parameters=', 'menu': 'a list of hashes of all the template variables for the stack'},
  \ ],
  \ 'command': [
      \  {'word': 'chdir=', 'menu': 'cd into this directory before running the command'},
      \  {'word': 'creates=', 'menu': 'a filename, when it already exists, this step will *not* be run.'},
      \  {'word': 'executable=', 'menu': 'change the shell used to execute the command. Should be an absolute path to the executable.'},
      \  {'word': 'removes=', 'menu': 'a filename, when it does not exist, this step will *not* be run.'},
      \  {'word': 'warn=', 'menu': 'if command warnings are on in ansible.cfg, do not warn about this particular line if set to no/false.'},
  \ ],
  \ 'composer': [
      \  {'word': 'command=', 'menu': 'Composer command like "install", "update" and so on'},
      \  {'word': 'no_dev=', 'menu': 'Disables installation of require-dev packages ( see --no-dev )'},
      \  {'word': 'no_plugins=', 'menu': 'Disables all plugins ( see --no-plugins )'},
      \  {'word': 'no_scripts=', 'menu': 'Skips the execution of all scripts defined in composer.json ( see --no-scripts )'},
      \  {'word': 'optimize_autoloader=', 'menu': 'Optimize autoloader during autoloader dump ( see --optimize-autoloader ). Convert PSR-0/4 autoloading to classmap to get a faster autoloader. This is recommended especially for production, but can take a bit of time to run so it is currently not done by default.'},
      \  {'word': 'prefer_dist=', 'menu': 'Forces installation from package dist even for de versions ( see --prefer-dist )'},
      \  {'word': 'prefer_source=', 'menu': 'Forces installation from package sources when possible ( see --prefer-source )'},
  \ ],
  \ 'copy': [
      \  {'word': 'backup=', 'menu': 'Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.'},
      \  {'word': 'content=', 'menu': 'When used instead of ''src'', sets the contents of a file directly to the specified value.'},
      \  {'word': 'directory_mode=', 'menu': 'When doing a recursive copy set the mode for the directories. If this is not set we will use the system defaults. The mode is only set on directories which are newly created, and will not affect those that already existed.'},
      \  {'word': 'follow=', 'menu': 'This flag indicates that filesystem links, if they exist, should be followed.'},
      \  {'word': 'force=', 'menu': 'the default is `yes'', which will replace the remote file when contents are different than the source.  If `no'', the file will only be transferred if the destination does not exist.'},
      \  {'word': 'group=', 'menu': 'name of the group that should own the file/directory, as would be fed to `chown'''},
      \  {'word': 'mode=', 'menu': 'mode the file or directory should be, such as 0644 as would be fed to `chmod''. As of version 1.8, the mode may be specified as a symbolic mode (for example, `u+rwx'' or `u=rw,g=r,o=r'').'},
      \  {'word': 'owner=', 'menu': 'name of the user that should own the file/directory, as would be fed to `chown'''},
      \  {'word': 'selevel=', 'menu': 'level part of the SELinux file context. This is the MLS/MCS attribute, sometimes known as the `range''. `_default'' feature works as for `seuser''.'},
      \  {'word': 'serole=', 'menu': 'role part of SELinux file context, `_default'' feature works as for `seuser''.'},
      \  {'word': 'setype=', 'menu': 'type part of SELinux file context, `_default'' feature works as for `seuser''.'},
      \  {'word': 'seuser=', 'menu': 'user part of SELinux file context. Will default to system policy, if applicable. If set to `_default'', it will use the `user'' portion of the policy if available'},
      \  {'word': 'src=', 'menu': 'Local path to a file to copy to the remote server; can be absolute or relative. If path is a directory, it is copied recursively. In this case, if path ends with "/", only inside contents of that directory are copied to destination. Otherwise, if it does not end with "/", the directory itself with all contents is copied. This behavior is similar to Rsync.'},
      \  {'word': 'validate=', 'menu': 'The validation command to run before copying into place.  The path to the file to validate is passed in via ''%s'' which must be present as in the visudo example below. The command is passed securely so shell features like expansion and pipes won''t work.'},
  \ ],
  \ 'cpanm': [
      \  {'word': 'from_path=', 'menu': 'The local directory from where to install'},
      \  {'word': 'locallib=', 'menu': 'Specify the install base to install modules'},
      \  {'word': 'mirror=', 'menu': 'Specifies the base URL for the CPAN mirror to use'},
      \  {'word': 'name=', 'menu': 'The name of the Perl library to install. You may use the "full distribution path", e.g.  MIYAGAWA/Plack-0.99_05.tar.gz'},
      \  {'word': 'notest=', 'menu': 'Do not run unit tests'},
  \ ],
  \ 'cron': [
      \  {'word': 'backup=', 'menu': 'If set, create a backup of the crontab before it is modified. The location of the backup is returned in the `backup'' variable by this module.'},
      \  {'word': 'cron_file=', 'menu': 'If specified, uses this file in cron.d instead of an individual user''s crontab.'},
      \  {'word': 'day=', 'menu': 'Day of the month the job should run ( 1-31, *, */2, etc )'},
      \  {'word': 'hour=', 'menu': 'Hour when the job should run ( 0-23, *, */2, etc )'},
      \  {'word': 'job=', 'menu': 'The command to execute. Required if state=present.'},
      \  {'word': 'minute=', 'menu': 'Minute when the job should run ( 0-59, *, */2, etc )'},
      \  {'word': 'month=', 'menu': 'Month of the year the job should run ( 1-12, *, */2, etc )'},
      \  {'word': 'reboot=', 'menu': 'If the job should be run at reboot. This option is deprecated. Users should use special_time.'},
      \  {'word': 'special_time=', 'menu': 'Special time specification nickname.'},
      \  {'word': 'state=', 'menu': 'Whether to ensure the job is present or absent.'},
      \  {'word': 'user=', 'menu': 'The specific user whose crontab should be modified.'},
      \  {'word': 'weekday=', 'menu': 'Day of the week that the job should run ( 0-6 for Sunday-Saturday, *, etc )'},
  \ ],
  \ 'datadog_event': [
      \  {'word': 'aggregation_key=', 'menu': 'An arbitrary string to use for aggregation.'},
      \  {'word': 'alert_type=', 'menu': 'Type of alert.'},
      \  {'word': 'date_happened=', 'menu': 'POSIX timestamp of the event. Default value is now.'},
      \  {'word': 'priority=', 'menu': 'The priority of the event.'},
      \  {'word': 'tags=', 'menu': 'Comma separated list of tags to apply to the event.'},
      \  {'word': 'validate_certs=', 'menu': 'If `no'', SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.'},
  \ ],
  \ 'debconf': [
      \  {'word': 'question=', 'menu': 'A debconf configuration setting'},
      \  {'word': 'unseen=', 'menu': 'Do not set ''seen'' flag when pre-seeding'},
      \  {'word': 'value=', 'menu': 'Value to set the configuration to'},
      \  {'word': 'vtype=', 'menu': 'The type of the value supplied'},
  \ ],
  \ 'debug': [
      \  {'word': 'msg=', 'menu': 'The customized message that is printed. If omitted, prints a generic message.'},
      \  {'word': 'var=', 'menu': 'A variable name to debug.  Mutually exclusive with the ''msg'' option.'},
  \ ],
  \ 'digital_ocean': [
      \  {'word': 'api_key=', 'menu': 'DigitalOcean api key.'},
      \  {'word': 'backups_enabled=', 'menu': 'Optional, Boolean, enables backups for your droplet.'},
      \  {'word': 'client_id=', 'menu': 'DigitalOcean manager id.'},
      \  {'word': 'command=', 'menu': 'Which target you want to operate on.'},
      \  {'word': 'id=', 'menu': 'Numeric, the droplet id you want to operate on.'},
      \  {'word': 'image_id=', 'menu': 'Numeric, this is the id of the image you would like the droplet created with.'},
      \  {'word': 'name=', 'menu': 'String, this is the name of the droplet - must be formatted by hostname rules, or the name of a SSH key.'},
      \  {'word': 'private_networking=', 'menu': 'Bool, add an additional, private network interface to droplet for inter-droplet communication.'},
      \  {'word': 'region_id=', 'menu': 'Numeric, this is the id of the region you would like your server to be created in.'},
      \  {'word': 'size_id=', 'menu': 'Numeric, this is the id of the size you would like the droplet created with.'},
      \  {'word': 'ssh_key_ids=', 'menu': 'Optional, comma separated list of ssh_key_ids that you would like to be added to the server.'},
      \  {'word': 'ssh_pub_key=', 'menu': 'The public SSH key you want to add to your account.'},
      \  {'word': 'state=', 'menu': 'Indicate desired state of the target.'},
      \  {'word': 'unique_name=', 'menu': 'Bool, require unique hostnames.  By default, DigitalOcean allows multiple hosts with the same name.  Setting this to "yes" allows only one host per name.  Useful for idempotence.'},
      \  {'word': 'virtio=', 'menu': 'Bool, turn on virtio driver in droplet for improved network and storage I/O.'},
      \  {'word': 'wait=', 'menu': 'Wait for the droplet to be in state ''running'' before returning.  If wait is "no" an ip_address may not be returned.'},
      \  {'word': 'wait_timeout=', 'menu': 'How long before wait gives up, in seconds.'},
  \ ],
  \ 'digital_ocean_domain': [
      \  {'word': 'api_key=', 'menu': 'DigitalOcean api key.'},
      \  {'word': 'client_id=', 'menu': 'DigitalOcean manager id.'},
      \  {'word': 'id=', 'menu': 'Numeric, the droplet id you want to operate on.'},
      \  {'word': 'ip=', 'menu': 'The IP address to point a domain at.'},
      \  {'word': 'name=', 'menu': 'String, this is the name of the droplet - must be formatted by hostname rules, or the name of a SSH key, or the name of a domain.'},
      \  {'word': 'state=', 'menu': 'Indicate desired state of the target.'},
  \ ],
  \ 'digital_ocean_sshkey': [
      \  {'word': 'api_key=', 'menu': 'DigitalOcean api key.'},
      \  {'word': 'client_id=', 'menu': 'DigitalOcean manager id.'},
      \  {'word': 'id=', 'menu': 'Numeric, the SSH key id you want to operate on.'},
      \  {'word': 'name=', 'menu': 'String, this is the name of an SSH key to create or destroy.'},
      \  {'word': 'ssh_pub_key=', 'menu': 'The public SSH key you want to add to your account.'},
      \  {'word': 'state=', 'menu': 'Indicate desired state of the target.'},
  \ ],
  \ 'django_manage': [
      \  {'word': 'apps=', 'menu': 'A list of space-delimited apps to target. Used by the ''test'' command.'},
      \  {'word': 'cache_table=', 'menu': 'The name of the table used for database-backed caching. Used by the ''createcachetable'' command.'},
      \  {'word': 'database=', 'menu': 'The database to target. Used by the ''createcachetable'', ''flush'', ''loaddata'', and ''syncdb'' commands.'},
      \  {'word': 'failfast=', 'menu': 'Fail the command immediately if a test fails. Used by the ''test'' command.'},
      \  {'word': 'fixtures=', 'menu': 'A space-delimited list of fixture file names to load in the database. *Required* by the ''loaddata'' command.'},
      \  {'word': 'link=', 'menu': 'Will create links to the files instead of copying them, you can only use this parameter with ''collectstatic'' command'},
      \  {'word': 'merge=', 'menu': 'Will run out-of-order or missing migrations as they are not rollback migrations, you can only use this parameter with ''migrate'' command'},
      \  {'word': 'pythonpath=', 'menu': 'A directory to add to the Python path. Typically used to include the settings module if it is located external to the application directory.'},
      \  {'word': 'settings=', 'menu': 'The Python path to the application''s settings module, such as ''myapp.settings''.'},
      \  {'word': 'skip=', 'menu': 'Will skip over out-of-order missing migrations, you can only use this parameter with `migrate'''},
      \  {'word': 'virtualenv=', 'menu': 'An optional path to a `virtualenv'' installation to use while running the manage application.'},
  \ ],
  \ 'dnsimple': [
      \  {'word': 'account_api_token=', 'menu': 'Account API token. See `account_email'' for info.'},
      \  {'word': 'account_email=', 'menu': 'Account email. If omitted, the env variables DNSIMPLE_EMAIL and DNSIMPLE_API_TOKEN will be looked for. If those aren''t found, a `.dnsimple'' file will be looked for, see: https://github.com/mikemaccana/dnsimple-python#getting-started'},
      \  {'word': 'domain=', 'menu': 'Domain to work with. Can be the domain name (e.g. "mydomain.com") or the numeric ID of the domain in DNSimple. If omitted, a list of domains will be returned. If domain is present but the domain doesn''t exist, it will be created.'},
      \  {'word': 'priority=', 'menu': 'Record priority'},
      \  {'word': 'record=', 'menu': 'Record to add, if blank a record for the domain will be created, supports the wildcard (*)'},
      \  {'word': 'record_ids=', 'menu': 'List of records to ensure they either exist or don''t exist'},
      \  {'word': 'solo=', 'menu': 'Whether the record should be the only one for that record type and record name. Only use with state=present on a record'},
      \  {'word': 'state=', 'menu': 'whether the record should exist or not'},
      \  {'word': 'ttl=', 'menu': 'The TTL to give the new record'},
      \  {'word': 'type=', 'menu': 'The type of DNS record to create'},
      \  {'word': 'value=', 'menu': 'Record value Must be specified when trying to ensure a record exists'},
  \ ],
  \ 'dnsmadeeasy': [
      \  {'word': 'record_name=', 'menu': 'Record name to get/create/delete/update. If record_name is not specified; all records for the domain will be returned in "result" regardless of the state argument.'},
      \  {'word': 'record_ttl=', 'menu': 'record''s "Time to live".  Number of seconds the record remains cached in DNS servers.'},
      \  {'word': 'record_type=', 'menu': 'Record type.'},
      \  {'word': 'record_value=', 'menu': 'Record value. HTTPRED: <redirection URL>, MX: <priority> <target name>, NS: <name server>, PTR: <target name>, SRV: <priority> <weight> <port> <target name>, TXT: <text value> If record_value is not specified; no changes will be made and the record will be returned in ''result'' (in other words, this module can be used to fetch a record''s current id, type, and ttl)'},
      \  {'word': 'validate_certs=', 'menu': 'If `no'', SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.'},
  \ ],
  \ 'docker': [
      \  {'word': 'command=', 'menu': 'Set command to run in a container on startup'},
      \  {'word': 'count=', 'menu': 'Set number of containers to run'},
      \  {'word': 'detach=', 'menu': 'Enable detached mode on start up, leaves container running in background'},
      \  {'word': 'dns=', 'menu': 'Set custom DNS servers for the container'},
      \  {'word': 'docker_api_version=', 'menu': 'Remote API version to use. This defaults to the current default as specified by docker-py.'},
      \  {'word': 'docker_url=', 'menu': 'URL of docker host to issue commands to'},
      \  {'word': 'env=', 'menu': 'Set environment variables (e.g. env="PASSWORD=sEcRe7,WORKERS=4")'},
      \  {'word': 'expose=', 'menu': 'Set container ports to expose for port mappings or links. (If the port is already exposed using EXPOSE in a Dockerfile, you don''t need to expose it again.)'},
      \  {'word': 'hostname=', 'menu': 'Set container hostname'},
      \  {'word': 'links=', 'menu': 'Link container(s) to other container(s) (e.g. links=redis,postgresql:db)'},
      \  {'word': 'lxc_conf=', 'menu': 'LXC config parameters,  e.g. lxc.aa_profile:unconfined'},
      \  {'word': 'memory_limit=', 'menu': 'Set RAM allocated to container'},
      \  {'word': 'name=', 'menu': 'Set the name of the container (cannot use with count)'},
      \  {'word': 'net=', 'menu': 'Set Network mode for the container (bridge, none, container:<name|id>, host). Requires docker >= 0.11.'},
      \  {'word': 'password=', 'menu': 'Set remote API password'},
      \  {'word': 'ports=', 'menu': 'Set private to public port mapping specification using docker CLI-style syntax [([<host_interface>:[host_port]])|(<host_port>):]<container_port>[/udp]'},
      \  {'word': 'privileged=', 'menu': 'Set whether the container should run in privileged mode'},
      \  {'word': 'publish_all_ports=', 'menu': 'Publish all exposed ports to the host interfaces'},
      \  {'word': 'registry=', 'menu': 'The remote registry URL to use for pulling images.'},
      \  {'word': 'state=', 'menu': 'Set the state of the container'},
      \  {'word': 'stdin_open=', 'menu': 'Keep stdin open'},
      \  {'word': 'tty=', 'menu': 'Allocate a pseudo-tty'},
      \  {'word': 'username=', 'menu': 'Set remote API username'},
      \  {'word': 'volumes=', 'menu': 'Set volume(s) to mount on the container'},
      \  {'word': 'volumes_from=', 'menu': 'Set shared volume(s) from another container'},
  \ ],
  \ 'easy_install': [
      \  {'word': 'executable=', 'menu': 'The explicit executable or a pathname to the executable to be used to run easy_install for a specific version of Python installed in the system. For example `easy_install-3.3'', if there are both Python 2.7 and 3.3 installations in the system and you want to run easy_install for the Python 3.3 installation.'},
      \  {'word': 'virtualenv=', 'menu': 'an optional `virtualenv'' directory path to install into. If the `virtualenv'' does not exist, it is created automatically'},
      \  {'word': 'virtualenv_command=', 'menu': 'The command to create the virtual environment with. For example `pyvenv'', `virtualenv'', `virtualenv2''.'},
      \  {'word': 'virtualenv_site_packages=', 'menu': 'Whether the virtual environment will inherit packages from the global site-packages directory.  Note that if this setting is changed on an already existing virtual environment it will not have any effect, the environment must be deleted and newly created.'},
  \ ],
  \ 'ec2': [
      \  {'word': 'assign_public_ip=', 'menu': 'when provisioning within vpc, assign a public IP address. Boto library must be 2.13.0+'},
      \  {'word': 'aws_access_key=', 'menu': 'AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used.'},
      \  {'word': 'aws_secret_key=', 'menu': 'AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used.'},
      \  {'word': 'count=', 'menu': 'number of instances to launch'},
      \  {'word': 'count_tag=', 'menu': 'Used with ''exact_count'' to determine how many nodes based on a specific tag criteria should be running.  This can be expressed in multiple ways and is shown in the EXAMPLES section.  For instance, one can request 25 servers that are tagged with "class=webserver".'},
      \  {'word': 'ebs_optimized=', 'menu': 'whether instance is using optimized EBS volumes, see http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html'},
      \  {'word': 'ec2_url=', 'menu': 'Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints).  Must be specified if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used'},
      \  {'word': 'exact_count=', 'menu': 'An integer value which indicates how many instances that match the ''count_tag'' parameter should be running. Instances are either created or terminated based on this value.'},
      \  {'word': 'group=', 'menu': 'security group (or list of groups) to use with the instance'},
      \  {'word': 'group_id=', 'menu': 'security group id (or list of ids) to use with the instance'},
      \  {'word': 'id=', 'menu': 'identifier for this instance or set of instances, so that the module will be idempotent with respect to EC2 instances. This identifier is valid for at least 24 hours after the termination of the instance, and should not be reused for another call later on. For details, see the description of client token at http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html.'},
      \  {'word': 'instance_ids=', 'menu': 'list of instance ids, currently used for states: absent, running, stopped'},
      \  {'word': 'instance_profile_name=', 'menu': 'Name of the IAM instance profile to use. Boto library must be 2.5.0+'},
      \  {'word': 'instance_tags=', 'menu': 'a hash/dictionary of tags to add to the new instance; ''{"key":"value"}'' and ''{"key":"value","key":"value"}'''},
      \  {'word': 'kernel=', 'menu': 'kernel `eki'' to use for the instance'},
      \  {'word': 'key_name=', 'menu': 'key pair to use on the instance'},
      \  {'word': 'monitoring=', 'menu': 'enable detailed monitoring (CloudWatch) for instance'},
      \  {'word': 'placement_group=', 'menu': 'placement group for the instance when using EC2 Clustered Compute'},
      \  {'word': 'private_ip=', 'menu': 'the private ip address to assign the instance (from the vpc subnet)'},
      \  {'word': 'profile=', 'menu': 'uses a boto profile. Only works with boto >= 2.24.0'},
      \  {'word': 'ramdisk=', 'menu': 'ramdisk `eri'' to use for the instance'},
      \  {'word': 'region=', 'menu': 'The AWS region to use.  Must be specified if ec2_url is not used. If not specified then the value of the EC2_REGION environment variable, if any, is used.'},
      \  {'word': 'security_token=', 'menu': 'security token to authenticate against AWS'},
      \  {'word': 'source_dest_check=', 'menu': 'Enable or Disable the Source/Destination checks (for NAT instances and Virtual Routers)'},
      \  {'word': 'spot_price=', 'menu': 'Maximum spot price to bid, If not set a regular on-demand instance is requested. A spot request is made with this maximum bid. When it is filled, the instance is started.'},
      \  {'word': 'spot_wait_timeout=', 'menu': 'how long to wait for the spot instance request to be fulfilled'},
      \  {'word': 'state=', 'menu': 'create or terminate instances'},
      \  {'word': 'user_data=', 'menu': 'opaque blob of data which is made available to the ec2 instance'},
      \  {'word': 'validate_certs=', 'menu': 'When set to "no", SSL certificates will not be validated for boto versions >= 2.6.0.'},
      \  {'word': 'volumes=', 'menu': 'a list of volume dicts, each containing device name and optionally ephemeral id or snapshot id. Size and type (and number of iops for io device type) must be specified for a new volume or a root volume, and may be passed for a snapshot volume. For any volume, a volume size less than 1 will be interpreted as a request not to create the volume.'},
      \  {'word': 'vpc_subnet_id=', 'menu': 'the subnet ID in which to launch the instance (VPC)'},
      \  {'word': 'wait=', 'menu': 'wait for the instance to be in state ''running'' before returning'},
      \  {'word': 'wait_timeout=', 'menu': 'how long before wait gives up, in seconds'},
      \  {'word': 'zone=', 'menu': 'AWS availability zone in which to launch the instance'},
  \ ],
  \ 'ec2_ami': [
      \  {'word': 'aws_access_key=', 'menu': 'AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used.'},
      \  {'word': 'aws_secret_key=', 'menu': 'AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used.'},
      \  {'word': 'delete_snapshot=', 'menu': 'Whether or not to deleted an AMI while deregistering it.'},
      \  {'word': 'description=', 'menu': 'An optional human-readable string describing the contents and purpose of the AMI.'},
      \  {'word': 'ec2_url=', 'menu': 'Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints).  Must be specified if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used'},
      \  {'word': 'image_id=', 'menu': 'Image ID to be deregistered.'},
      \  {'word': 'instance_id=', 'menu': 'instance id of the image to create'},
      \  {'word': 'name=', 'menu': 'The name of the new image to create'},
      \  {'word': 'no_reboot=', 'menu': 'An optional flag indicating that the bundling process should not attempt to shutdown the instance before bundling. If this flag is True, the responsibility of maintaining file system integrity is left to the owner of the instance. The default choice is "no".'},
      \  {'word': 'profile=', 'menu': 'uses a boto profile. Only works with boto >= 2.24.0'},
      \  {'word': 'region=', 'menu': 'The AWS region to use.  Must be specified if ec2_url is not used. If not specified then the value of the EC2_REGION environment variable, if any, is used.'},
      \  {'word': 'security_token=', 'menu': 'security token to authenticate against AWS'},
      \  {'word': 'state=', 'menu': 'create or deregister/delete image'},
      \  {'word': 'validate_certs=', 'menu': 'When set to "no", SSL certificates will not be validated for boto versions >= 2.6.0.'},
      \  {'word': 'wait=', 'menu': 'wait for the AMI to be in state ''available'' before returning.'},
      \  {'word': 'wait_timeout=', 'menu': 'how long before wait gives up, in seconds'},
  \ ],
  \ 'ec2_ami_search': [
      \  {'word': 'arch=', 'menu': 'C P U   a r c h i t e c t u r e'},
      \  {'word': 'region=', 'menu': 'E C 2   r e g i o n'},
      \  {'word': 'store=', 'menu': 'B a c k - e n d   s t o r e   f o r   i n s t a n c e'},
      \  {'word': 'stream=', 'menu': 'T y p e   o f   r e l e a s e .'},
      \  {'word': 'virt=', 'menu': 'v i r u t a l i z a t i o n   t y p e'},
  \ ],
  \ 'ec2_asg': [
      \  {'word': 'availability_zones=', 'menu': 'List of availability zone names in which to create the group.  Defaults to all the availability zones in the region if vpc_zone_identifier is not set.'},
      \  {'word': 'aws_access_key=', 'menu': 'AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used.'},
      \  {'word': 'aws_secret_key=', 'menu': 'AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used.'},
      \  {'word': 'desired_capacity=', 'menu': 'Desired number of instances in group'},
      \  {'word': 'ec2_url=', 'menu': 'Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints).  Must be specified if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used'},
      \  {'word': 'health_check_period=', 'menu': 'Length of time in seconds after a new EC2 instance comes into service that Auto Scaling starts checking its health.'},
      \  {'word': 'health_check_type=', 'menu': 'The service you want the health status from, Amazon EC2 or Elastic Load Balancer.'},
      \  {'word': 'launch_config_name=', 'menu': 'Name of the Launch configuration to use for the group. See the ec2_lc module for managing these.'},
      \  {'word': 'lc_check=', 'menu': 'Check to make sure instances that are being replaced with replace_instances do not aready have the current launch_config.'},
      \  {'word': 'load_balancers=', 'menu': 'List of ELB names to use for the group'},
      \  {'word': 'max_size=', 'menu': 'Maximum number of instances in group'},
      \  {'word': 'min_size=', 'menu': 'Minimum number of instances in group'},
      \  {'word': 'profile=', 'menu': 'uses a boto profile. Only works with boto >= 2.24.0'},
      \  {'word': 'region=', 'menu': 'The AWS region to use. If not specified then the value of the EC2_REGION environment variable, if any, is used.'},
      \  {'word': 'replace_all_instances=', 'menu': 'In a rolling fashion, replace all instances with an old launch configuration with one from the current launch configuraiton.'},
      \  {'word': 'replace_batch_size=', 'menu': 'Number of instances you''d like to replace at a time.  Used with replace_all_instances.'},
      \  {'word': 'replace_instances=', 'menu': 'List of instance_ids belonging to the named ASG that you would like to terminate and be replaced with instances matching the current launch configuration.'},
      \  {'word': 'security_token=', 'menu': 'security token to authenticate against AWS'},
      \  {'word': 'tags=', 'menu': 'A list of tags to add to the Auto Scale Group. Optional key is ''propagate_at_launch'', which defaults to true.'},
      \  {'word': 'validate_certs=', 'menu': 'When set to "no", SSL certificates will not be validated for boto versions >= 2.6.0.'},
      \  {'word': 'vpc_zone_identifier=', 'menu': 'List of VPC subnets to use'},
      \  {'word': 'wait_timeout=', 'menu': 'how long before wait instances to become viable when replaced.  Used in concjunction with instance_ids option.'},
  \ ],
  \ 'ec2_eip': [
      \  {'word': 'aws_access_key=', 'menu': 'AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used.'},
      \  {'word': 'aws_secret_key=', 'menu': 'AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used.'},
      \  {'word': 'ec2_url=', 'menu': 'Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints).  Must be specified if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used'},
      \  {'word': 'in_vpc=', 'menu': 'allocate an EIP inside a VPC or not'},
      \  {'word': 'instance_id=', 'menu': 'The EC2 instance id'},
      \  {'word': 'profile=', 'menu': 'uses a boto profile. Only works with boto >= 2.24.0'},
      \  {'word': 'public_ip=', 'menu': 'The elastic IP address to associate with the instance. If absent, allocate a new address'},
      \  {'word': 'region=', 'menu': 'the EC2 region to use'},
      \  {'word': 'reuse_existing_ip_allowed=', 'menu': 'Reuse an EIP that is not associated to an instance (when available), instead of allocating a new one.'},
      \  {'word': 'security_token=', 'menu': 'security token to authenticate against AWS'},
      \  {'word': 'state=', 'menu': 'If present, associate the IP with the instance. If absent, disassociate the IP with the instance.'},
      \  {'word': 'validate_certs=', 'menu': 'When set to "no", SSL certificates will not be validated for boto versions >= 2.6.0.'},
      \  {'word': 'wait_timeout=', 'menu': 'how long to wait in seconds for newly provisioned EIPs to become available'},
  \ ],
  \ 'ec2_elb': [
      \  {'word': 'aws_access_key=', 'menu': 'AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used.'},
      \  {'word': 'aws_secret_key=', 'menu': 'AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used.'},
      \  {'word': 'ec2_elbs=', 'menu': 'List of ELB names, required for registration. The ec2_elbs fact should be used if there was a previous de-register.'},
      \  {'word': 'ec2_url=', 'menu': 'Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints).  Must be specified if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used'},
      \  {'word': 'enable_availability_zone=', 'menu': 'Whether to enable the availability zone of the instance on the target ELB if the availability zone has not already been enabled. If set to no, the task will fail if the availability zone is not enabled on the ELB.'},
      \  {'word': 'profile=', 'menu': 'uses a boto profile. Only works with boto >= 2.24.0'},
      \  {'word': 'region=', 'menu': 'The AWS region to use. If not specified then the value of the EC2_REGION environment variable, if any, is used.'},
      \  {'word': 'security_token=', 'menu': 'security token to authenticate against AWS'},
      \  {'word': 'validate_certs=', 'menu': 'When set to "no", SSL certificates will not be validated for boto versions >= 2.6.0.'},
      \  {'word': 'wait=', 'menu': 'Wait for instance registration or deregistration to complete successfully before returning.'},
      \  {'word': 'wait_timeout=', 'menu': 'Number of seconds to wait for an instance to change state. If 0 then this module may return an error if a transient error occurs. If non-zero then any transient errors are ignored until the timeout is reached. Ignored when wait=no.'},
  \ ],
  \ 'ec2_elb_lb': [
      \  {'word': 'aws_access_key=', 'menu': 'AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used.'},
      \  {'word': 'aws_secret_key=', 'menu': 'AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used.'},
      \  {'word': 'connection_draining_timeout=', 'menu': 'Wait a specified timeout allowing connections to drain before terminating an instance'},
      \  {'word': 'cross_az_load_balancing=', 'menu': 'Distribute load across all configured Availablity Zones'},
      \  {'word': 'ec2_url=', 'menu': 'Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints).  Must be specified if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used'},
      \  {'word': 'health_check=', 'menu': 'An associative array of health check configuration settigs (see example)'},
      \  {'word': 'listeners=', 'menu': 'List of ports/protocols for this ELB to listen on (see example)'},
      \  {'word': 'profile=', 'menu': 'uses a boto profile. Only works with boto >= 2.24.0'},
      \  {'word': 'purge_listeners=', 'menu': 'Purge existing listeners on ELB that are not found in listeners'},
      \  {'word': 'purge_subnets=', 'menu': 'Purge existing subnet on ELB that are not found in subnets'},
      \  {'word': 'purge_zones=', 'menu': 'Purge existing availability zones on ELB that are not found in zones'},
      \  {'word': 'region=', 'menu': 'The AWS region to use. If not specified then the value of the EC2_REGION environment variable, if any, is used.'},
      \  {'word': 'scheme=', 'menu': 'The scheme to use when creating the ELB. For a private VPC-visible ELB use ''internal''.'},
      \  {'word': 'security_group_ids=', 'menu': 'A list of security groups to apply to the elb'},
      \  {'word': 'security_token=', 'menu': 'security token to authenticate against AWS'},
      \  {'word': 'subnets=', 'menu': 'A list of VPC subnets to use when creating ELB. Zones should be empty if using this.'},
      \  {'word': 'validate_certs=', 'menu': 'When set to "no", SSL certificates will not be validated for boto versions >= 2.6.0.'},
      \  {'word': 'zones=', 'menu': 'List of availability zones to enable on this ELB'},
  \ ],
  \ 'ec2_facts': [
      \  {'word': 'validate_certs=', 'menu': 'If `no'', SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.'},
  \ ],
  \ 'ec2_group': [
      \  {'word': 'aws_access_key=', 'menu': 'AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used.'},
      \  {'word': 'aws_secret_key=', 'menu': 'AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used.'},
      \  {'word': 'ec2_url=', 'menu': 'Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints).  Must be specified if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used'},
      \  {'word': 'profile=', 'menu': 'uses a boto profile. Only works with boto >= 2.24.0'},
      \  {'word': 'purge_rules=', 'menu': 'Purge existing rules on security group that are not found in rules'},
      \  {'word': 'purge_rules_egress=', 'menu': 'Purge existing rules_egree on security group that are not found in rules_egress'},
      \  {'word': 'region=', 'menu': 'the EC2 region to use'},
      \  {'word': 'rules=', 'menu': 'List of firewall inbound rules to enforce in this group (see example).'},
      \  {'word': 'rules_egress=', 'menu': 'List of firewall outbound rules to enforce in this group (see example).'},
      \  {'word': 'security_token=', 'menu': 'security token to authenticate against AWS'},
      \  {'word': 'state=', 'menu': 'Create or delete a security group'},
      \  {'word': 'validate_certs=', 'menu': 'When set to "no", SSL certificates will not be validated for boto versions >= 2.6.0.'},
      \  {'word': 'vpc_id=', 'menu': 'ID of the VPC to create the group in.'},
  \ ],
  \ 'ec2_key': [
      \  {'word': 'aws_access_key=', 'menu': 'AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used.'},
      \  {'word': 'aws_secret_key=', 'menu': 'AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used.'},
      \  {'word': 'ec2_url=', 'menu': 'Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints).  Must be specified if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used'},
      \  {'word': 'key_material=', 'menu': 'Public key material.'},
      \  {'word': 'profile=', 'menu': 'uses a boto profile. Only works with boto >= 2.24.0'},
      \  {'word': 'region=', 'menu': 'the EC2 region to use'},
      \  {'word': 'security_token=', 'menu': 'security token to authenticate against AWS'},
      \  {'word': 'state=', 'menu': 'create or delete keypair'},
      \  {'word': 'validate_certs=', 'menu': 'When set to "no", SSL certificates will not be validated for boto versions >= 2.6.0.'},
      \  {'word': 'wait=', 'menu': 'Wait for the specified action to complete before returning.'},
      \  {'word': 'wait_timeout=', 'menu': 'How long before wait gives up, in seconds'},
  \ ],
  \ 'ec2_lc': [
      \  {'word': 'assign_public_ip=', 'menu': 'Used for Auto Scaling groups that launch instances into an Amazon Virtual Private Cloud. Specifies whether to assign a public IP address to each instance launched in a Amazon VPC.'},
      \  {'word': 'aws_access_key=', 'menu': 'AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used.'},
      \  {'word': 'aws_secret_key=', 'menu': 'AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used.'},
      \  {'word': 'ebs_optimized=', 'menu': 'Specifies whether the instance is optimized for EBS I/O (true) or not (false).'},
      \  {'word': 'ec2_url=', 'menu': 'Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints).  Must be specified if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used'},
      \  {'word': 'image_id=', 'menu': 'The AMI unique identifier to be used for the group'},
      \  {'word': 'instance_monitoring=', 'menu': 'whether instances in group are launched with detailed monitoring.'},
      \  {'word': 'instance_profile_name=', 'menu': 'The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instances.'},
      \  {'word': 'kernel_id=', 'menu': 'Kernel id for the EC2 instance'},
      \  {'word': 'key_name=', 'menu': 'The SSH key name to be used for access to managed instances'},
      \  {'word': 'profile=', 'menu': 'uses a boto profile. Only works with boto >= 2.24.0'},
      \  {'word': 'ramdisk_id=', 'menu': 'A RAM disk id for the instances.'},
      \  {'word': 'region=', 'menu': 'The AWS region to use. If not specified then the value of the EC2_REGION environment variable, if any, is used.'},
      \  {'word': 'security_groups=', 'menu': 'A list of security groups into which instances should be found'},
      \  {'word': 'security_token=', 'menu': 'security token to authenticate against AWS'},
      \  {'word': 'spot_price=', 'menu': 'The spot price you are bidding. Only applies for an autoscaling group with spot instances.'},
      \  {'word': 'user_data=', 'menu': 'opaque blob of data which is made available to the ec2 instance'},
      \  {'word': 'validate_certs=', 'menu': 'When set to "no", SSL certificates will not be validated for boto versions >= 2.6.0.'},
      \  {'word': 'volumes=', 'menu': 'a list of volume dicts, each containing device name and optionally ephemeral id or snapshot id. Size and type (and number of iops for io device type) must be specified for a new volume or a root volume, and may be passed for a snapshot volume. For any volume, a volume size less than 1 will be interpreted as a request not to create the volume.'},
  \ ],
  \ 'ec2_snapshot': [
      \  {'word': 'aws_access_key=', 'menu': 'AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used.'},
      \  {'word': 'aws_secret_key=', 'menu': 'AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used.'},
      \  {'word': 'description=', 'menu': 'description to be applied to the snapshot'},
      \  {'word': 'device_name=', 'menu': 'device name of a mounted volume to be snapshotted'},
      \  {'word': 'ec2_url=', 'menu': 'Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints).  Must be specified if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used'},
      \  {'word': 'instance_id=', 'menu': 'instance that has the required volume to snapshot mounted'},
      \  {'word': 'profile=', 'menu': 'uses a boto profile. Only works with boto >= 2.24.0'},
      \  {'word': 'region=', 'menu': 'The AWS region to use. If not specified then the value of the EC2_REGION environment variable, if any, is used.'},
      \  {'word': 'security_token=', 'menu': 'security token to authenticate against AWS'},
      \  {'word': 'snapshot_tags=', 'menu': 'a hash/dictionary of tags to add to the snapshot'},
      \  {'word': 'validate_certs=', 'menu': 'When set to "no", SSL certificates will not be validated for boto versions >= 2.6.0.'},
      \  {'word': 'volume_id=', 'menu': 'volume from which to take the snapshot'},
      \  {'word': 'wait=', 'menu': 'wait for the snapshot to be ready'},
      \  {'word': 'wait_timeout=', 'menu': 'how long before wait gives up, in seconds specify 0 to wait forever'},
  \ ],
  \ 'ec2_tag': [
      \  {'word': 'aws_access_key=', 'menu': 'AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used.'},
      \  {'word': 'aws_secret_key=', 'menu': 'AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used.'},
      \  {'word': 'ec2_url=', 'menu': 'Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints).  Must be specified if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used'},
      \  {'word': 'profile=', 'menu': 'uses a boto profile. Only works with boto >= 2.24.0'},
      \  {'word': 'region=', 'menu': 'region in which the resource exists.'},
      \  {'word': 'security_token=', 'menu': 'security token to authenticate against AWS'},
      \  {'word': 'state=', 'menu': 'Whether the tags should be present or absent on the resource. Use list to interrogate the tags of an instance.'},
      \  {'word': 'validate_certs=', 'menu': 'When set to "no", SSL certificates will not be validated for boto versions >= 2.6.0.'},
  \ ],
  \ 'ec2_vol': [
      \  {'word': 'aws_access_key=', 'menu': 'AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used.'},
      \  {'word': 'aws_secret_key=', 'menu': 'AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used.'},
      \  {'word': 'device_name=', 'menu': 'device id to override device mapping. Assumes /dev/sdf for Linux/UNIX and /dev/xvdf for Windows.'},
      \  {'word': 'ec2_url=', 'menu': 'Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints).  Must be specified if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used'},
      \  {'word': 'encrypted=', 'menu': 'Enable encryption at rest for this volume.'},
      \  {'word': 'id=', 'menu': 'volume id if you wish to attach an existing volume (requires instance) or remove an existing volume'},
      \  {'word': 'instance=', 'menu': 'instance ID if you wish to attach the volume.'},
      \  {'word': 'iops=', 'menu': 'the provisioned IOPs you want to associate with this volume (integer).'},
      \  {'word': 'name=', 'menu': 'volume Name tag if you wish to attach an existing volume (requires instance)'},
      \  {'word': 'profile=', 'menu': 'uses a boto profile. Only works with boto >= 2.24.0'},
      \  {'word': 'region=', 'menu': 'The AWS region to use. If not specified then the value of the EC2_REGION environment variable, if any, is used.'},
      \  {'word': 'security_token=', 'menu': 'security token to authenticate against AWS'},
      \  {'word': 'snapshot=', 'menu': 'snapshot ID on which to base the volume'},
      \  {'word': 'state=', 'menu': 'whether to ensure the volume is present or absent, or to list existing volumes (The `list'' option was added in version 1.8).'},
      \  {'word': 'validate_certs=', 'menu': 'When set to "no", SSL certificates will not be validated for boto versions >= 2.6.0.'},
      \  {'word': 'volume_size=', 'menu': 'size of volume (in GB) to create.'},
      \  {'word': 'zone=', 'menu': 'zone in which to create the volume, if unset uses the zone the instance is in (if set)'},
  \ ],
  \ 'ec2_vpc': [
      \  {'word': 'aws_access_key=', 'menu': 'AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used.'},
      \  {'word': 'aws_secret_key=', 'menu': 'AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used.'},
      \  {'word': 'dns_hostnames=', 'menu': 'toggles the "Enable DNS hostname support for instances" flag'},
      \  {'word': 'dns_support=', 'menu': 'toggles the "Enable DNS resolution" flag'},
      \  {'word': 'instance_tenancy=', 'menu': 'The supported tenancy options for instances launched into the VPC.'},
      \  {'word': 'internet_gateway=', 'menu': 'Toggle whether there should be an Internet gateway attached to the VPC'},
      \  {'word': 'region=', 'menu': 'region in which the resource exists.'},
      \  {'word': 'route_tables=', 'menu': 'A dictionary array of route tables to add of the form: { subnets: [172.22.2.0/24, 172.22.3.0/24,], routes: [{ dest: 0.0.0.0/0, gw: igw},] }. Where the subnets list is those subnets the route table should be associated with, and the routes list is a list of routes to be in the table.  The special keyword for the gw of igw specifies that you should the route should go through the internet gateway attached to the VPC. gw also accepts instance-ids in addition igw. This module is currently unable to affect the "main" route table due to some limitations in boto, so you must explicitly define the associated subnets or they will be attached to the main table implicitly. As of 1.8, if the route_tables parameter is not specified, no existing routes will be modified.'},
      \  {'word': 'subnets=', 'menu': 'A dictionary array of subnets to add of the form: { cidr: ..., az: ... , resource_tags: ... }. Where az is the desired availability zone of the subnet, but it is not required. Tags (i.e.: resource_tags) is also optional and use dictionary form: { "Environment":"Dev", "Tier":"Web", ...}. All VPC subnets not in this list will be removed. As of 1.8, if the subnets parameter is not specified, no existing subnets will be modified.'},
      \  {'word': 'validate_certs=', 'menu': 'When set to "no", SSL certificates will not be validated for boto versions >= 2.6.0.'},
      \  {'word': 'vpc_id=', 'menu': 'A VPC id to terminate when state=absent'},
      \  {'word': 'wait=', 'menu': 'wait for the VPC to be in state ''available'' before returning'},
      \  {'word': 'wait_timeout=', 'menu': 'how long before wait gives up, in seconds'},
  \ ],
  \ 'ejabberd_user': [
      \  {'word': 'logging=', 'menu': 'enables or disables the local syslog facility for this module'},
      \  {'word': 'password=', 'menu': 'the password to assign to the username'},
      \  {'word': 'state=', 'menu': 'describe the desired state of the user to be managed'},
  \ ],
  \ 'elasticache': [
      \  {'word': 'aws_access_key=', 'menu': 'AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used.'},
      \  {'word': 'aws_secret_key=', 'menu': 'AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used.'},
      \  {'word': 'cache_engine_version=', 'menu': 'The version number of the cache engine'},
      \  {'word': 'cache_port=', 'menu': 'The port number on which each of the cache nodes will accept connections'},
      \  {'word': 'cache_security_groups=', 'menu': 'A list of cache security group names to associate with this cache cluster'},
      \  {'word': 'engine=', 'menu': 'Name of the cache engine to be used (memcached or redis)'},
      \  {'word': 'hard_modify=', 'menu': 'Whether to destroy and recreate an existing cache cluster if necessary in order to modify its state'},
      \  {'word': 'node_type=', 'menu': 'The compute and memory capacity of the nodes in the cache cluster'},
      \  {'word': 'num_nodes=', 'menu': 'The initial number of cache nodes that the cache cluster will have'},
      \  {'word': 'region=', 'menu': 'The AWS region to use. If not specified then the value of the EC2_REGION environment variable, if any, is used.'},
      \  {'word': 'security_group_ids=', 'menu': 'A list of vpc security group names to associate with this cache cluster. Only use if inside a vpc'},
      \  {'word': 'wait=', 'menu': 'Wait for cache cluster result before returning'},
      \  {'word': 'zone=', 'menu': 'The EC2 Availability Zone in which the cache cluster will be created'},
  \ ],
  \ 'facter': [
  \ ],
  \ 'fail': [
      \  {'word': 'msg=', 'menu': 'The customized message used for failing execution. If omitted, fail will simple bail out with a generic message.'},
  \ ],
  \ 'fetch': [
      \  {'word': 'fail_on_missing=', 'menu': 'Makes it fails when the source file is missing.'},
      \  {'word': 'flat=', 'menu': 'A l l o w s   y o u   t o   o v e r r i d e   t h e   d e f a u l t   b e h a v i o r   o f   p r e p e n d i n g   h o s t n a m e / p a t h / t o / f i l e   t o   t h e   d e s t i n a t i o n .     I f   d e s t   e n d s   w i t h   '' / '' ,   i t   w i l l   u s e   t h e   b a s e n a m e   o f   t h e   s o u r c e   f i l e ,   s i m i l a r   t o   t h e   c o p y   m o d u l e .     O b v i o u s l y   t h i s   i s   o n l y   h a n d y   i f   t h e   f i l e n a m e s   a r e   u n i q u e .'},
      \  {'word': 'validate_checksum=', 'menu': 'Verify that the source and destination checksums match after the files are fetched.'},
  \ ],
  \ 'file': [
      \  {'word': 'follow=', 'menu': 'This flag indicates that filesystem links, if they exist, should be followed.'},
      \  {'word': 'force=', 'menu': 'force the creation of the symlinks in two cases: the source file does not exist (but will appear later); the destination exists and is a file (so, we need to unlink the "path" file and create symlink to the "src" file in place of it).'},
      \  {'word': 'group=', 'menu': 'name of the group that should own the file/directory, as would be fed to `chown'''},
      \  {'word': 'mode=', 'menu': 'mode the file or directory should be, such as 0644 as would be fed to `chmod''. As of version 1.8, the mode may be specified as a symbolic mode (for example, `u+rwx'' or `u=rw,g=r,o=r'').'},
      \  {'word': 'owner=', 'menu': 'name of the user that should own the file/directory, as would be fed to `chown'''},
      \  {'word': 'recurse=', 'menu': 'recursively set the specified file attributes (applies only to state=directory)'},
      \  {'word': 'selevel=', 'menu': 'level part of the SELinux file context. This is the MLS/MCS attribute, sometimes known as the `range''. `_default'' feature works as for `seuser''.'},
      \  {'word': 'serole=', 'menu': 'role part of SELinux file context, `_default'' feature works as for `seuser''.'},
      \  {'word': 'setype=', 'menu': 'type part of SELinux file context, `_default'' feature works as for `seuser''.'},
      \  {'word': 'seuser=', 'menu': 'user part of SELinux file context. Will default to system policy, if applicable. If set to `_default'', it will use the `user'' portion of the policy if available'},
      \  {'word': 'src=', 'menu': 'path of the file to link to (applies only to `state=link''). Will accept absolute, relative and nonexisting paths. Relative paths are not expanded.'},
      \  {'word': 'state=', 'menu': 'If `directory'', all immediate subdirectories will be created if they do not exist, since 1.7 they will be created with the supplied permissions. If `file'', the file will NOT be created if it does not exist, see the [copy] or [template] module if you want that behavior.  If `link'', the symbolic link will be created or changed. Use `hard'' for hardlinks. If `absent'', directories will be recursively deleted, and files or symlinks will be unlinked. If `touch'' (new in 1.4), an empty file will be created if the c(path) does not exist, while an existing file or directory will receive updated file access and modification times (similar to the way `touch` works from the command line).'},
  \ ],
  \ 'filesystem': [
      \  {'word': 'force=', 'menu': 'If yes, allows to create new filesystem on devices that already has filesystem.'},
      \  {'word': 'opts=', 'menu': 'List of options to be passed to mkfs command.'},
  \ ],
  \ 'fireball': [
      \  {'word': 'minutes=', 'menu': 'The `fireball'' listener daemon is started on nodes and will stay around for this number of minutes before turning itself off.'},
      \  {'word': 'port=', 'menu': 'TCP port for ZeroMQ'},
  \ ],
  \ 'firewalld': [
      \  {'word': 'port=', 'menu': 'Name of a port to add/remove to/from firewalld must be in the form PORT/PROTOCOL'},
      \  {'word': 'rich_rule=', 'menu': 'Rich rule to add/remove to/from firewalld'},
      \  {'word': 'service=', 'menu': 'Name of a service to add/remove to/from firewalld - service must be listed in /etc/services'},
      \  {'word': 'timeout=', 'menu': 'The amount of time the rule should be in effect for when non-permanent'},
      \  {'word': 'zone=', 'menu': 'The firewalld zone to add/remove to/from (NOTE: default zone can be configured per system but "public" is default from upstream. Available choices can be extended based on per-system configs, listed here are "out of the box" defaults).'},
  \ ],
  \ 'flowdock': [
      \  {'word': 'external_user_name=', 'menu': '(chat only - required) Name of the "user" sending the message'},
      \  {'word': 'from_address=', 'menu': '(inbox only - required) Email address of the message sender'},
      \  {'word': 'from_name=', 'menu': '(inbox only) Name of the message sender'},
      \  {'word': 'link=', 'menu': '(inbox only) Link associated with the message. This will be used to link the message subject in Team Inbox.'},
      \  {'word': 'project=', 'menu': '(inbox only) Human readable identifier for more detailed message categorization'},
      \  {'word': 'reply_to=', 'menu': '(inbox only) Email address for replies'},
      \  {'word': 'source=', 'menu': '(inbox only - required) Human readable identifier of the application that uses the Flowdock API'},
      \  {'word': 'subject=', 'menu': '(inbox only - required) Subject line of the message'},
      \  {'word': 'tags=', 'menu': 'tags of the message, separated by commas'},
      \  {'word': 'validate_certs=', 'menu': 'If `no'', SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.'},
  \ ],
  \ 'gc_storage': [
      \  {'word': 'dest=', 'menu': 'The destination file path when downloading an object/key with a GET operation.'},
      \  {'word': 'expiration=', 'menu': 'Time limit (in seconds) for the URL generated and returned by GCA when performing a mode=put or mode=get_url operation. This url is only avaialbe when public-read is the acl for the object.'},
      \  {'word': 'force=', 'menu': 'Forces an overwrite either locally on the filesystem or remotely with the object/key. Used with PUT and GET operations.'},
      \  {'word': 'object=', 'menu': 'Keyname of the object inside the bucket. Can be also be used to create "virtual directories" (see examples).'},
      \  {'word': 'permission=', 'menu': 'This option let''s the user set the canned permissions on the object/bucket that are created. The permissions that can be set are ''private'', ''public-read'', ''authenticated-read''.'},
      \  {'word': 'src=', 'menu': 'The source file path when performing a PUT operation.'},
  \ ],
  \ 'gce': [
      \  {'word': 'disks=', 'menu': 'a list of persistent disks to attach to the instance; a string value gives the name of the disk; alternatively, a dictionary value can define ''name'' and ''mode'' (''READ_ONLY'' or ''READ_WRITE''). The first entry will be the boot disk (which must be READ_WRITE).'},
      \  {'word': 'image=', 'menu': 'image string to use for the instance'},
      \  {'word': 'instance_names=', 'menu': 'a comma-separated list of instance names to create or destroy'},
      \  {'word': 'machine_type=', 'menu': 'machine type to use for the instance, use ''n1-standard-1'' by default'},
      \  {'word': 'metadata=', 'menu': 'a hash/dictionary of custom data for the instance; ''{"key":"value",...}'''},
      \  {'word': 'name=', 'menu': 'identifier when working with a single instance'},
      \  {'word': 'network=', 'menu': 'name of the network, ''default'' will be used if not specified'},
      \  {'word': 'pem_file=', 'menu': 'path to the pem file associated with the service account email'},
      \  {'word': 'persistent_boot_disk=', 'menu': 'if set, create the instance with a persistent boot disk'},
      \  {'word': 'project_id=', 'menu': 'your GCE project ID'},
      \  {'word': 'service_account_email=', 'menu': 'service account email'},
      \  {'word': 'state=', 'menu': 'desired state of the resource'},
      \  {'word': 'tags=', 'menu': 'a comma-separated list of tags to associate with the instance'},
  \ ],
  \ 'gce_lb': [
      \  {'word': 'external_ip=', 'menu': 'the external static IPv4 (or auto-assigned) address for the LB'},
      \  {'word': 'httphealthcheck_healthy_count=', 'menu': 'number of consecutive successful checks before marking a node healthy'},
      \  {'word': 'httphealthcheck_host=', 'menu': 'host header to pass through on HTTP check requests'},
      \  {'word': 'httphealthcheck_interval=', 'menu': 'the duration in seconds between each health check request'},
      \  {'word': 'httphealthcheck_name=', 'menu': 'the name identifier for the HTTP health check'},
      \  {'word': 'httphealthcheck_path=', 'menu': 'the url path to use for HTTP health checking'},
      \  {'word': 'httphealthcheck_port=', 'menu': 'the TCP port to use for HTTP health checking'},
      \  {'word': 'httphealthcheck_timeout=', 'menu': 'the timeout in seconds before a request is considered a failed check'},
      \  {'word': 'httphealthcheck_unhealthy_count=', 'menu': 'number of consecutive failed checks before marking a node unhealthy'},
      \  {'word': 'members=', 'menu': 'a list of zone/nodename pairs, e.g [''us-central1-a/www-a'', ...]'},
      \  {'word': 'name=', 'menu': 'name of the load-balancer resource'},
      \  {'word': 'pem_file=', 'menu': 'path to the pem file associated with the service account email'},
      \  {'word': 'port_range=', 'menu': 'the port (range) to forward, e.g. 80 or 8000-8888 defaults to all ports'},
      \  {'word': 'project_id=', 'menu': 'your GCE project ID'},
      \  {'word': 'protocol=', 'menu': 'the protocol used for the load-balancer packet forwarding, tcp or udp'},
      \  {'word': 'region=', 'menu': 'the GCE region where the load-balancer is defined'},
      \  {'word': 'service_account_email=', 'menu': 'service account email'},
      \  {'word': 'state=', 'menu': 'desired state of the LB'},
  \ ],
  \ 'gce_net': [
      \  {'word': 'allowed=', 'menu': 'the protocol:ports to allow (''tcp:80'' or ''tcp:80,443'' or ''tcp:80-800'')'},
      \  {'word': 'fwname=', 'menu': 'name of the firewall rule'},
      \  {'word': 'ipv4_range=', 'menu': 'the IPv4 address range in CIDR notation for the network'},
      \  {'word': 'name=', 'menu': 'name of the network'},
      \  {'word': 'pem_file=', 'menu': 'path to the pem file associated with the service account email'},
      \  {'word': 'project_id=', 'menu': 'your GCE project ID'},
      \  {'word': 'service_account_email=', 'menu': 'service account email'},
      \  {'word': 'src_range=', 'menu': 'the source IPv4 address range in CIDR notation'},
      \  {'word': 'src_tags=', 'menu': 'the source instance tags for creating a firewall rule'},
      \  {'word': 'state=', 'menu': 'desired state of the persistent disk'},
  \ ],
  \ 'gce_pd': [
      \  {'word': 'detach_only=', 'menu': 'do not destroy the disk, merely detach it from an instance'},
      \  {'word': 'image=', 'menu': 'the source image to use for the disk'},
      \  {'word': 'instance_name=', 'menu': 'instance name if you wish to attach or detach the disk'},
      \  {'word': 'mode=', 'menu': 'GCE mount mode of disk, READ_ONLY (default) or READ_WRITE'},
      \  {'word': 'pem_file=', 'menu': 'path to the pem file associated with the service account email'},
      \  {'word': 'project_id=', 'menu': 'your GCE project ID'},
      \  {'word': 'service_account_email=', 'menu': 'service account email'},
      \  {'word': 'size_gb=', 'menu': 'whole integer size of disk (in GB) to create, default is 10 GB'},
      \  {'word': 'snapshot=', 'menu': 'the source snapshot to use for the disk'},
      \  {'word': 'state=', 'menu': 'desired state of the persistent disk'},
      \  {'word': 'zone=', 'menu': 'zone in which to create the disk'},
  \ ],
  \ 'gem': [
      \  {'word': 'executable=', 'menu': 'Override the path to the gem executable'},
      \  {'word': 'gem_source=', 'menu': 'The path to a local gem used as installation source.'},
      \  {'word': 'include_dependencies=', 'menu': 'Whether to include dependencies or not.'},
      \  {'word': 'pre_release=', 'menu': 'Allow installation of pre-release versions of the gem.'},
      \  {'word': 'repository=', 'menu': 'The repository from which the gem will be installed'},
      \  {'word': 'state=', 'menu': 'The desired state of the gem. `latest'' ensures that the latest version is installed.'},
      \  {'word': 'user_install=', 'menu': 'Install gem in user''s local gems cache or for all users'},
      \  {'word': 'version=', 'menu': 'Version of the gem to be installed/removed.'},
  \ ],
  \ 'get_url': [
      \  {'word': 'force=', 'menu': 'If `yes'' and `dest'' is not a directory, will download the file every time and replace the file if the contents change. If `no'', the file will only be downloaded if the destination does not exist. Generally should be `yes'' only for small local files. Prior to 0.6, this module behaved as if `yes'' was the default.'},
      \  {'word': 'others=', 'menu': 'all arguments accepted by the [file] module also work here'},
      \  {'word': 'sha256sum=', 'menu': 'If a SHA-256 checksum is passed to this parameter, the digest of the destination file will be calculated after it is downloaded to ensure its integrity and verify that the transfer completed successfully.'},
      \  {'word': 'timeout=', 'menu': 'Timeout for URL request'},
      \  {'word': 'url_password=', 'menu': 'The password for use in HTTP basic authentication. If the `url_username'' parameter is not specified, the `url_password'' parameter will not be used.'},
      \  {'word': 'url_username=', 'menu': 'The username for use in HTTP basic authentication. This parameter can be used without `url_password'' for sites that allow empty passwords.'},
      \  {'word': 'use_proxy=', 'menu': 'if `no'', it will not use a proxy, even if one is defined in an environment variable on the target hosts.'},
      \  {'word': 'validate_certs=', 'menu': 'If `no'', SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.'},
  \ ],
  \ 'getent': [
      \  {'word': 'fail_key=', 'menu': 'If a supplied key is missing this will make the task fail if True'},
      \  {'word': 'key=', 'menu': 'key from which to return values from the specified database, otherwise the full contents are returned.'},
      \  {'word': 'split=', 'menu': 'character used to split the database values into lists/arrays such as '':'' or ''	'', otherwise  it will try to pick one depending on the database'},
  \ ],
  \ 'git': [
      \  {'word': 'accept_hostkey=', 'menu': 'if `yes'', adds the hostkey for the repo url if not already added. If ssh_args contains "-o StrictHostKeyChecking=no", this parameter is ignored.'},
      \  {'word': 'bare=', 'menu': 'if `yes'', repository will be created as a bare repo, otherwise it will be a standard repo with a workspace.'},
      \  {'word': 'depth=', 'menu': 'Create a shallow clone with a history truncated to the specified number or revisions. The minimum possible value is `1'', otherwise ignored.'},
      \  {'word': 'executable=', 'menu': 'Path to git executable to use. If not supplied, the normal mechanism for resolving binary paths will be used.'},
      \  {'word': 'force=', 'menu': 'If `yes'', any modified files in the working repository will be discarded.  Prior to 0.7, this was always ''yes'' and could not be disabled.'},
      \  {'word': 'key_file=', 'menu': 'Specify an optional private key file to use for the checkout.'},
      \  {'word': 'recursive=', 'menu': 'if `no'', repository will be cloned without the --recursive option, skipping sub-modules.'},
      \  {'word': 'reference=', 'menu': 'Reference repository (see "git clone --reference ...")'},
      \  {'word': 'remote=', 'menu': 'Name of the remote.'},
      \  {'word': 'ssh_opts=', 'menu': 'Creates a wrapper script and exports the path as GIT_SSH which git then automatically uses to override ssh arguments. An example value could be "-o StrictHostKeyChecking=no"'},
      \  {'word': 'track_submodules=', 'menu': 'if `yes'', submodules will track the latest commit on their master branch (or other branch specified in .gitmodules).  If `no'', submodules will be kept at the revision specified by the main project. This is equivalent to specifying the --remote flag to git submodule update.'},
      \  {'word': 'update=', 'menu': 'If `no'', just returns information about the repository without updating.'},
      \  {'word': 'version=', 'menu': 'What version of the repository to check out.  This can be the full 40-character `SHA-1'' hash, the literal string `HEAD'', a branch name, or a tag name.'},
  \ ],
  \ 'github_hooks': [
      \  {'word': 'hookurl=', 'menu': 'When creating a new hook, this is the url that you want github to post to. It is only required when creating a new hook.'},
      \  {'word': 'validate_certs=', 'menu': 'If `no'', SSL certificates for the target repo will not be validated. This should only be used on personally controlled sites using self-signed certificates.'},
  \ ],
  \ 'glance_image': [
      \  {'word': 'auth_url=', 'menu': 'The keystone url for authentication'},
      \  {'word': 'container_format=', 'menu': 'The format of the container'},
      \  {'word': 'copy_from=', 'menu': 'A url from where the image can be downloaded, mutually exclusive with file parameter'},
      \  {'word': 'disk_format=', 'menu': 'The format of the disk that is getting uploaded'},
      \  {'word': 'endpoint_type=', 'menu': 'The name of the glance service''s endpoint URL type'},
      \  {'word': 'file=', 'menu': 'The path to the file which has to be uploaded, mutually exclusive with copy_from'},
      \  {'word': 'is_public=', 'menu': 'Whether the image can be accessed publicly'},
      \  {'word': 'min_disk=', 'menu': 'The minimum disk space required to deploy this image'},
      \  {'word': 'min_ram=', 'menu': 'The minimum ram required to deploy this image'},
      \  {'word': 'owner=', 'menu': 'The owner of the image'},
      \  {'word': 'region_name=', 'menu': 'Name of the region'},
      \  {'word': 'state=', 'menu': 'Indicate desired state of the resource'},
      \  {'word': 'timeout=', 'menu': 'The time to wait for the image process to complete in seconds'},
  \ ],
  \ 'group': [
      \  {'word': 'gid=', 'menu': 'Optional `GID'' to set for the group.'},
      \  {'word': 'state=', 'menu': 'Whether the group should be present or not on the remote host.'},
      \  {'word': 'system=', 'menu': 'If `yes'', indicates that the group created is a system group.'},
  \ ],
  \ 'group_by': [
  \ ],
  \ 'grove': [
      \  {'word': 'icon_url=', 'menu': 'Icon for the service'},
      \  {'word': 'service=', 'menu': 'Name of the service (displayed as the "user" in the message)'},
      \  {'word': 'url=', 'menu': 'Service URL for the web client'},
      \  {'word': 'validate_certs=', 'menu': 'If `no'', SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.'},
  \ ],
  \ 'hg': [
      \  {'word': 'executable=', 'menu': 'Path to hg executable to use. If not supplied, the normal mechanism for resolving binary paths will be used.'},
      \  {'word': 'force=', 'menu': 'Discards uncommitted changes. Runs `hg update -C''.'},
      \  {'word': 'purge=', 'menu': 'Deletes untracked files. Runs `hg purge''.'},
      \  {'word': 'revision=', 'menu': 'Equivalent `-r'' option in hg command which could be the changeset, revision number, branch name or even tag.'},
  \ ],
  \ 'hipchat': [
      \  {'word': 'api=', 'menu': 'API url if using a self-hosted hipchat server'},
      \  {'word': 'color=', 'menu': 'Background color for the message. Default is yellow.'},
      \  {'word': 'from=', 'menu': 'Name the message will appear be sent from. max 15 characters. Over 15, will be shorten.'},
      \  {'word': 'msg_format=', 'menu': 'message format. html or text. Default is text.'},
      \  {'word': 'notify=', 'menu': 'notify or not (change the tab color, play a sound, etc)'},
      \  {'word': 'validate_certs=', 'menu': 'If `no'', SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.'},
  \ ],
  \ 'homebrew': [
      \  {'word': 'install_options=', 'menu': 'options flags to install a package'},
      \  {'word': 'state=', 'menu': 'state of the package'},
      \  {'word': 'update_homebrew=', 'menu': 'update homebrew itself first'},
      \  {'word': 'upgrade_all=', 'menu': 'upgrade all homebrew packages'},
  \ ],
  \ 'homebrew_cask': [
      \  {'word': 'state=', 'menu': 'state of the cask'},
  \ ],
  \ 'homebrew_tap': [
      \  {'word': 'state=', 'menu': 'state of the repository.'},
  \ ],
  \ 'hostname': [
  \ ],
  \ 'htpasswd': [
      \  {'word': 'create=', 'menu': 'Used with `state=present''. If specified, the file will be created if it does not already exist. If set to "no", will fail if the file does not exist'},
      \  {'word': 'crypt_scheme=', 'menu': 'Encryption scheme to be used.'},
      \  {'word': 'password=', 'menu': 'Password associated with user. Must be specified if user does not exist yet.'},
      \  {'word': 'state=', 'menu': 'Whether the user entry should be present or not'},
  \ ],
  \ 'include_vars': [
  \ ],
  \ 'ini_file': [
      \  {'word': 'backup=', 'menu': 'Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.'},
      \  {'word': 'follow=', 'menu': 'This flag indicates that filesystem links, if they exist, should be followed.'},
      \  {'word': 'group=', 'menu': 'name of the group that should own the file/directory, as would be fed to `chown'''},
      \  {'word': 'mode=', 'menu': 'mode the file or directory should be, such as 0644 as would be fed to `chmod''. As of version 1.8, the mode may be specified as a symbolic mode (for example, `u+rwx'' or `u=rw,g=r,o=r'').'},
      \  {'word': 'option=', 'menu': 'if set (required for changing a `value''), this is the name of the option. May be omitted if adding/removing a whole `section''.'},
      \  {'word': 'others=', 'menu': 'all arguments accepted by the [file] module also work here'},
      \  {'word': 'owner=', 'menu': 'name of the user that should own the file/directory, as would be fed to `chown'''},
      \  {'word': 'selevel=', 'menu': 'level part of the SELinux file context. This is the MLS/MCS attribute, sometimes known as the `range''. `_default'' feature works as for `seuser''.'},
      \  {'word': 'serole=', 'menu': 'role part of SELinux file context, `_default'' feature works as for `seuser''.'},
      \  {'word': 'setype=', 'menu': 'type part of SELinux file context, `_default'' feature works as for `seuser''.'},
      \  {'word': 'seuser=', 'menu': 'user part of SELinux file context. Will default to system policy, if applicable. If set to `_default'', it will use the `user'' portion of the policy if available'},
      \  {'word': 'value=', 'menu': 'the string value to be associated with an `option''. May be omitted when removing an `option''.'},
  \ ],
  \ 'irc': [
      \  {'word': 'color=', 'menu': 'Text color for the message. ("none" is a valid option in 1.6 or later, in 1.6 and prior, the default color is black, not "none").'},
      \  {'word': 'key=', 'menu': 'Channel key'},
      \  {'word': 'nick=', 'menu': 'Nickname. May be shortened, depending on server''s NICKLEN setting.'},
      \  {'word': 'passwd=', 'menu': 'Server password'},
      \  {'word': 'port=', 'menu': 'IRC server port number'},
      \  {'word': 'server=', 'menu': 'IRC server name/address'},
      \  {'word': 'timeout=', 'menu': 'Timeout to use while waiting for successful registration and join messages, this is to prevent an endless loop'},
      \  {'word': 'use_ssl=', 'menu': 'Designates whether TLS/SSL should be used when connecting to the IRC server'},
  \ ],
  \ 'jabber': [
      \  {'word': 'encoding=', 'menu': 'm e s s a g e   e n c o d i n g'},
      \  {'word': 'host=', 'menu': 'h o s t   t o   c o n n e c t ,   o v e r r i d e s   u s e r   i n f o'},
      \  {'word': 'port=', 'menu': 'p o r t   t o   c o n n e c t   t o ,   o v e r r i d e s   d e f a u l t'},
  \ ],
  \ 'jboss': [
      \  {'word': 'deploy_path=', 'menu': 'The location in the filesystem where the deployment scanner listens'},
      \  {'word': 'src=', 'menu': 'The remote path of the application ear or war to deploy'},
      \  {'word': 'state=', 'menu': 'Whether the application should be deployed or undeployed'},
  \ ],
  \ 'jira': [
      \  {'word': 'assignee=', 'menu': 'Sets the assignee on create or transition operations. Note not all transitions will allow this.'},
      \  {'word': 'comment=', 'menu': 'The comment text to add.'},
      \  {'word': 'description=', 'menu': 'The issue description, where appropriate.'},
      \  {'word': 'fields=', 'menu': 'This is a free-form data structure that can contain arbitrary data. This is passed directly to the JIRA REST API (possibly after merging with other required data, as when passed to create). See examples for more information, and the JIRA REST API for the structure required for various fields.'},
      \  {'word': 'issue=', 'menu': 'An existing issue key to operate on.'},
      \  {'word': 'issuetype=', 'menu': 'The issue type, for issue creation.'},
      \  {'word': 'project=', 'menu': 'The project for this operation. Required for issue creation.'},
      \  {'word': 'status=', 'menu': 'The desired status; only relevant for the transition operation.'},
      \  {'word': 'summary=', 'menu': 'The issue summary, where appropriate.'},
  \ ],
  \ 'kernel_blacklist': [
      \  {'word': 'blacklist_file=', 'menu': 'If specified, use this blacklist file instead of `/etc/modprobe.d/blacklist-ansible.conf''.'},
      \  {'word': 'state=', 'menu': 'Whether the module should be present in the blacklist or absent.'},
  \ ],
  \ 'keystone_user': [
      \  {'word': 'email=', 'menu': 'An email address for the user'},
      \  {'word': 'endpoint=', 'menu': 'The keystone url for authentication'},
      \  {'word': 'login_password=', 'menu': 'Password of login user'},
      \  {'word': 'login_tenant_name=', 'menu': 'The tenant login_user belongs to'},
      \  {'word': 'login_user=', 'menu': 'login username to authenticate to keystone'},
      \  {'word': 'password=', 'menu': 'The password to be assigned to the user'},
      \  {'word': 'role=', 'menu': 'The name of the role to be assigned or created'},
      \  {'word': 'state=', 'menu': 'Indicate desired state of the resource'},
      \  {'word': 'tenant=', 'menu': 'The tenant name that has be added/removed'},
      \  {'word': 'tenant_description=', 'menu': 'A description for the tenant'},
      \  {'word': 'token=', 'menu': 'The token to be uses in case the password is not specified'},
      \  {'word': 'user=', 'menu': 'The name of the user that has to added/removed from OpenStack'},
  \ ],
  \ 'layman': [
      \  {'word': 'list_url=', 'menu': 'An URL of the alternative overlays list that defines the overlay to install. This list will be fetched and saved under `${overlay_defs}''/${name}.xml), where `overlay_defs'' is readed from the Layman''s configuration.'},
      \  {'word': 'state=', 'menu': 'Whether to install (`present''), sync (`updated''), or uninstall (`absent'') the overlay.'},
  \ ],
  \ 'librato_annotation': [
      \  {'word': 'description=', 'menu': 'The description contains extra meta-data about a particular annotation The description should contain specifics on the individual annotation e.g. Deployed 9b562b2 shipped new feature foo!'},
      \  {'word': 'end_time=', 'menu': 'The unix timestamp indicating the the time at which the event referenced by this annotation ended For events that have a duration, this is a useful way to annotate the duration of the event'},
      \  {'word': 'name=', 'menu': 'The annotation stream name If the annotation stream does not exist, it will be created automatically'},
      \  {'word': 'source=', 'menu': 'A string which describes the originating source of an annotation when that annotation is tracked across multiple members of a population'},
      \  {'word': 'start_time=', 'menu': 'The unix timestamp indicating the the time at which the event referenced by this annotation started'},
  \ ],
  \ 'lineinfile': [
      \  {'word': 'backrefs=', 'menu': 'Used with `state=present''. If set, line can contain backreferences (both positional and named) that will get populated if the `regexp'' matches. This flag changes the operation of the module slightly; `insertbefore'' and `insertafter'' will be ignored, and if the `regexp'' doesn''t match anywhere in the file, the file will be left unchanged. If the `regexp'' does match, the last matching line will be replaced by the expanded line parameter.'},
      \  {'word': 'backup=', 'menu': 'Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.'},
      \  {'word': 'create=', 'menu': 'Used with `state=present''. If specified, the file will be created if it does not already exist. By default it will fail if the file is missing.'},
      \  {'word': 'follow=', 'menu': 'This flag indicates that filesystem links, if they exist, should be followed.'},
      \  {'word': 'group=', 'menu': 'name of the group that should own the file/directory, as would be fed to `chown'''},
      \  {'word': 'insertafter=', 'menu': 'Used with `state=present''. If specified, the line will be inserted after the specified regular expression. A special value is available; `EOF'' for inserting the line at the end of the file. May not be used with `backrefs''.'},
      \  {'word': 'insertbefore=', 'menu': 'Used with `state=present''. If specified, the line will be inserted before the specified regular expression. A value is available; `BOF'' for inserting the line at the beginning of the file. May not be used with `backrefs''.'},
      \  {'word': 'line=', 'menu': 'Required for `state=present''. The line to insert/replace into the file. If `backrefs'' is set, may contain backreferences that will get expanded with the `regexp'' capture groups if the regexp matches. The backreferences should be double escaped (see examples).'},
      \  {'word': 'mode=', 'menu': 'mode the file or directory should be, such as 0644 as would be fed to `chmod''. As of version 1.8, the mode may be specified as a symbolic mode (for example, `u+rwx'' or `u=rw,g=r,o=r'').'},
      \  {'word': 'others=', 'menu': 'All arguments accepted by the [file] module also work here.'},
      \  {'word': 'owner=', 'menu': 'name of the user that should own the file/directory, as would be fed to `chown'''},
      \  {'word': 'regexp=', 'menu': 'The regular expression to look for in every line of the file. For `state=present'', the pattern to replace if found; only the last line found will be replaced. For `state=absent'', the pattern of the line to remove.  Uses Python regular expressions; see http://docs.python.org/2/library/re.html.'},
      \  {'word': 'selevel=', 'menu': 'level part of the SELinux file context. This is the MLS/MCS attribute, sometimes known as the `range''. `_default'' feature works as for `seuser''.'},
      \  {'word': 'serole=', 'menu': 'role part of SELinux file context, `_default'' feature works as for `seuser''.'},
      \  {'word': 'setype=', 'menu': 'type part of SELinux file context, `_default'' feature works as for `seuser''.'},
      \  {'word': 'seuser=', 'menu': 'user part of SELinux file context. Will default to system policy, if applicable. If set to `_default'', it will use the `user'' portion of the policy if available'},
      \  {'word': 'state=', 'menu': 'Whether the line should be there or not.'},
      \  {'word': 'validate=', 'menu': 'validation to run before copying into place. Use %s in the command to indicate the current file to validate. The command is passed securely so shell features like expansion and pipes won''t work.'},
  \ ],
  \ 'linode': [
      \  {'word': 'api_key=', 'menu': 'Linode API key'},
      \  {'word': 'datacenter=', 'menu': 'datacenter to create an instance in (Linode Datacenter)'},
      \  {'word': 'distribution=', 'menu': 'distribution to use for the instance (Linode Distribution)'},
      \  {'word': 'linode_id=', 'menu': 'Unique ID of a linode server'},
      \  {'word': 'name=', 'menu': 'Name to give the instance (alphanumeric, dashes, underscore) To keep sanity on the Linode Web Console, name is prepended with LinodeID_'},
      \  {'word': 'password=', 'menu': 'root password to apply to a new server (auto generated if missing)'},
      \  {'word': 'payment_term=', 'menu': 'payment term to use for the instance (payment term in months)'},
      \  {'word': 'plan=', 'menu': 'plan to use for the instance (Linode plan)'},
      \  {'word': 'ssh_pub_key=', 'menu': 'SSH public key applied to root user'},
      \  {'word': 'state=', 'menu': 'Indicate desired state of the resource'},
      \  {'word': 'swap=', 'menu': 'swap size in MB'},
      \  {'word': 'wait=', 'menu': 'wait for the instance to be in state ''running'' before returning'},
      \  {'word': 'wait_timeout=', 'menu': 'how long before wait gives up, in seconds'},
  \ ],
  \ 'lldp': [
  \ ],
  \ 'locale_gen': [
      \  {'word': 'state=', 'menu': 'Whether the locale shall be present.'},
  \ ],
  \ 'logentries': [
      \  {'word': 'state=', 'menu': 'following state of the log'},
  \ ],
  \ 'lvg': [
      \  {'word': 'force=', 'menu': 'If yes, allows to remove volume group with logical volumes.'},
      \  {'word': 'pesize=', 'menu': 'The size of the physical extent in megabytes. Must be a power of 2.'},
      \  {'word': 'pvs=', 'menu': 'List of comma-separated devices to use as physical devices in this volume group. Required when creating or resizing volume group.'},
      \  {'word': 'state=', 'menu': 'Control if the volume group exists.'},
      \  {'word': 'vg_options=', 'menu': 'Additional options to pass to `vgcreate'' when creating the volume group.'},
  \ ],
  \ 'lvol': [
      \  {'word': 'force=', 'menu': 'Shrink or remove operations of volumes requires this switch. Ensures that that filesystems get never corrupted/destroyed by mistake.'},
      \  {'word': 'size=', 'menu': 'The size of the logical volume, according to lvcreate(8) --size, by default in megabytes or optionally with one of [bBsSkKmMgGtTpPeE] units; or according to lvcreate(8) --extents as a percentage of [VG|PVS|FREE]; resizing is not supported with percentages.'},
      \  {'word': 'state=', 'menu': 'Control if the logical volume exists.'},
  \ ],
  \ 'macports': [
      \  {'word': 'state=', 'menu': 'state of the package'},
      \  {'word': 'update_cache=', 'menu': 'update the package db first'},
  \ ],
  \ 'mail': [
      \  {'word': 'attach=', 'menu': 'A space-separated list of pathnames of files to attach to the message. Attached files will have their content-type set to `application/octet-stream''.'},
      \  {'word': 'bcc=', 'menu': 'The email-address(es) the mail is being ''blind'' copied to. This is a comma-separated list, which may contain address and phrase portions.'},
      \  {'word': 'body=', 'menu': 'The body of the email being sent.'},
      \  {'word': 'cc=', 'menu': 'The email-address(es) the mail is being copied to. This is a comma-separated list, which may contain address and phrase portions.'},
      \  {'word': 'charset=', 'menu': 'The character set of email being sent'},
      \  {'word': 'from=', 'menu': 'The email-address the mail is sent from. May contain address and phrase.'},
      \  {'word': 'headers=', 'menu': 'A vertical-bar-separated list of headers which should be added to the message. Each individual header is specified as `header=value'' (see example below).'},
      \  {'word': 'host=', 'menu': 'The mail server'},
      \  {'word': 'port=', 'menu': 'The mail server port'},
      \  {'word': 'to=', 'menu': 'The email-address(es) the mail is being sent to. This is a comma-separated list, which may contain address and phrase portions.'},
  \ ],
  \ 'modprobe': [
      \  {'word': 'params=', 'menu': 'Modules parameters.'},
      \  {'word': 'state=', 'menu': 'Whether the module should be present or absent.'},
  \ ],
  \ 'mongodb_user': [
      \  {'word': 'login_host=', 'menu': 'The host running the database'},
      \  {'word': 'login_password=', 'menu': 'The password used to authenticate with'},
      \  {'word': 'login_port=', 'menu': 'The port to connect to'},
      \  {'word': 'login_user=', 'menu': 'The username used to authenticate with'},
      \  {'word': 'password=', 'menu': 'The password to use for the user'},
      \  {'word': 'replica_set=', 'menu': 'Replica set to connect to (automatically connects to primary for writes)'},
      \  {'word': 'roles=', 'menu': 'The database user roles valid values are one or more of the following: read, ''readWrite'', ''dbAdmin'', ''userAdmin'', ''clusterAdmin'', ''readAnyDatabase'', ''readWriteAnyDatabase'', ''userAdminAnyDatabase'', ''dbAdminAnyDatabase'' This param requires mongodb 2.4+ and pymongo 2.5+'},
      \  {'word': 'ssl=', 'menu': 'Whether to use an SSL connection when connecting to the database'},
      \  {'word': 'state=', 'menu': 'The database user state'},
  \ ],
  \ 'monit': [
  \ ],
  \ 'mount': [
      \  {'word': 'dump=', 'menu': 'dump (see fstab(8))'},
      \  {'word': 'fstab=', 'menu': 'file to use instead of `/etc/fstab''. You shouldn''t use that option unless you really know what you are doing. This might be useful if you need to configure mountpoints in a chroot environment.'},
      \  {'word': 'opts=', 'menu': 'mount options (see fstab(8))'},
      \  {'word': 'passno=', 'menu': 'passno (see fstab(8))'},
  \ ],
  \ 'mqtt': [
      \  {'word': 'client_id=', 'menu': 'MQTT client identifier'},
      \  {'word': 'password=', 'menu': 'Password for `username'' to authenticate against the broker.'},
      \  {'word': 'port=', 'menu': 'MQTT broker port number'},
      \  {'word': 'qos=', 'menu': 'QoS (Quality of Service)'},
      \  {'word': 'retain=', 'menu': 'Setting this flag causes the broker to retain (i.e. keep) the message so that applications that subsequently subscribe to the topic can received the last retained message immediately.'},
      \  {'word': 'server=', 'menu': 'MQTT broker address/name'},
      \  {'word': 'username=', 'menu': 'Username to authenticate against the broker.'},
  \ ],
  \ 'mysql_db': [
      \  {'word': 'collation=', 'menu': 'Collation mode'},
      \  {'word': 'encoding=', 'menu': 'Encoding mode'},
      \  {'word': 'login_host=', 'menu': 'Host running the database'},
      \  {'word': 'login_password=', 'menu': 'The password used to authenticate with'},
      \  {'word': 'login_port=', 'menu': 'Port of the MySQL server. Requires login_host be defined as other then localhost if login_port is used'},
      \  {'word': 'login_unix_socket=', 'menu': 'The path to a Unix domain socket for local connections'},
      \  {'word': 'login_user=', 'menu': 'The username used to authenticate with'},
      \  {'word': 'state=', 'menu': 'The database state'},
      \  {'word': 'target=', 'menu': 'Location, on the remote host, of the dump file to read from or write to. Uncompressed SQL files (`.sql'') as well as bzip2 (`.bz2'') and gzip (`.gz'') compressed files are supported.'},
  \ ],
  \ 'mysql_replication': [
      \  {'word': 'login_host=', 'menu': 'mysql host to connect'},
      \  {'word': 'login_password=', 'menu': 'password to connect mysql host, if defined login_user also needed.'},
      \  {'word': 'login_unix_socket=', 'menu': 'unix socket to connect mysql server'},
      \  {'word': 'login_user=', 'menu': 'username to connect mysql host, if defined login_password also needed.'},
      \  {'word': 'master_connect_retry=', 'menu': 'same as mysql variable'},
      \  {'word': 'master_host=', 'menu': 'same as mysql variable'},
      \  {'word': 'master_log_file=', 'menu': 'same as mysql variable'},
      \  {'word': 'master_log_pos=', 'menu': 'same as mysql variable'},
      \  {'word': 'master_password=', 'menu': 'same as mysql variable'},
      \  {'word': 'master_port=', 'menu': 'same as mysql variable'},
      \  {'word': 'master_ssl=', 'menu': 'same as mysql variable'},
      \  {'word': 'master_ssl_ca=', 'menu': 'same as mysql variable'},
      \  {'word': 'master_ssl_capath=', 'menu': 'same as mysql variable'},
      \  {'word': 'master_ssl_cert=', 'menu': 'same as mysql variable'},
      \  {'word': 'master_ssl_cipher=', 'menu': 'same as mysql variable'},
      \  {'word': 'master_ssl_key=', 'menu': 'same as mysql variable'},
      \  {'word': 'master_user=', 'menu': 'same as mysql variable'},
      \  {'word': 'mode=', 'menu': 'module operating mode. Could be getslave (SHOW SLAVE STATUS), getmaster (SHOW MASTER STATUS), changemaster (CHANGE MASTER TO), startslave (START SLAVE), stopslave (STOP SLAVE)'},
      \  {'word': 'relay_log_file=', 'menu': 'same as mysql variable'},
      \  {'word': 'relay_log_pos=', 'menu': 'same as mysql variable'},
  \ ],
  \ 'mysql_user': [
      \  {'word': 'append_privs=', 'menu': 'Append the privileges defined by priv to the existing ones for this user instead of overwriting existing ones.'},
      \  {'word': 'check_implicit_admin=', 'menu': 'Check if mysql allows login as root/nopassword before trying supplied credentials.'},
      \  {'word': 'host=', 'menu': 'the ''host'' part of the MySQL username'},
      \  {'word': 'login_host=', 'menu': 'Host running the database'},
      \  {'word': 'login_password=', 'menu': 'The password used to authenticate with'},
      \  {'word': 'login_port=', 'menu': 'Port of the MySQL server'},
      \  {'word': 'login_unix_socket=', 'menu': 'The path to a Unix domain socket for local connections'},
      \  {'word': 'login_user=', 'menu': 'The username used to authenticate with'},
      \  {'word': 'password=', 'menu': 'set the user''s password'},
      \  {'word': 'priv=', 'menu': 'MySQL privileges string in the format: `db.table:priv1,priv2'''},
      \  {'word': 'state=', 'menu': 'Whether the user should exist.  When `absent'', removes the user.'},
  \ ],
  \ 'mysql_variables': [
      \  {'word': 'login_host=', 'menu': 'mysql host to connect'},
      \  {'word': 'login_password=', 'menu': 'password to connect mysql host, if defined login_user also needed.'},
      \  {'word': 'login_unix_socket=', 'menu': 'unix socket to connect mysql server'},
      \  {'word': 'login_user=', 'menu': 'username to connect mysql host, if defined login_password also needed.'},
      \  {'word': 'value=', 'menu': 'If set, then sets variable value to this'},
  \ ],
  \ 'nagios': [
      \  {'word': 'author=', 'menu': 'Author to leave downtime comments as. Only usable with the `downtime'' action.'},
      \  {'word': 'cmdfile=', 'menu': 'Path to the nagios `command file'' (FIFO pipe). Only required if auto-detection fails.'},
      \  {'word': 'host=', 'menu': 'Host to operate on in Nagios.'},
      \  {'word': 'minutes=', 'menu': 'Minutes to schedule downtime for. Only usable with the `downtime'' action.'},
  \ ],
  \ 'netscaler': [
      \  {'word': 'action=', 'menu': 'the action you want to perform on the entity'},
      \  {'word': 'nsc_protocol=', 'menu': 'protocol used to access netscaler'},
      \  {'word': 'type=', 'menu': 'type of the entity'},
      \  {'word': 'validate_certs=', 'menu': 'If `no'', SSL certificates for the target url will not be validated. This should only be used on personally controlled sites using self-signed certificates.'},
  \ ],
  \ 'newrelic_deployment': [
      \  {'word': 'app_name=', 'menu': '(one of app_name or application_id are required) The value of app_name in the newrelic.yml file used by the application'},
      \  {'word': 'application_id=', 'menu': '(one of app_name or application_id are required) The application id, found in the URL when viewing the application in RPM'},
      \  {'word': 'appname=', 'menu': 'Name of the application'},
      \  {'word': 'changelog=', 'menu': 'A list of changes for this deployment'},
      \  {'word': 'description=', 'menu': 'Text annotation for the deployment - notes for you'},
      \  {'word': 'environment=', 'menu': 'The environment for this deployment'},
      \  {'word': 'revision=', 'menu': 'A revision number (e.g., git commit SHA)'},
      \  {'word': 'user=', 'menu': 'The name of the user/process that triggered this deployment'},
      \  {'word': 'validate_certs=', 'menu': 'If `no'', SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.'},
  \ ],
  \ 'nexmo': [
      \  {'word': 'validate_certs=', 'menu': 'If `no'', SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.'},
  \ ],
  \ 'nova_compute': [
      \  {'word': 'auth_url=', 'menu': 'The keystone url for authentication'},
      \  {'word': 'auto_floating_ip=', 'menu': 'Should a floating ip be auto created and assigned'},
      \  {'word': 'availability_zone=', 'menu': 'Name of the availability zone'},
      \  {'word': 'config_drive=', 'menu': 'Whether to boot the server with config drive enabled'},
      \  {'word': 'flavor_id=', 'menu': 'The id of the flavor in which the new VM has to be created. Mutually exclusive with flavor_ram'},
      \  {'word': 'flavor_include=', 'menu': 'Text to use to filter flavor names, for the case, such as Rackspace, where there are multiple flavors that have the same ram count. flavor_include is a positive match filter - it must exist in the flavor name.'},
      \  {'word': 'flavor_ram=', 'menu': 'The minimum amount of ram in MB that the flavor in which the new VM has to be created must have. Mutually exclusive with flavor_id'},
      \  {'word': 'floating_ip_pools=', 'menu': 'list of floating IP pools from which to choose a floating IP'},
      \  {'word': 'floating_ips=', 'menu': 'list of valid floating IPs that pre-exist to assign to this node'},
      \  {'word': 'image_exclude=', 'menu': 'Text to use to filter image names, for the case, such as HP, where there are multiple image names matching the common identifying portions. image_exclude is a negative match filter - it is text that may not exist in the image name. Defaults to "(deprecated)"'},
      \  {'word': 'key_name=', 'menu': 'The key pair name to be used when creating a VM'},
      \  {'word': 'meta=', 'menu': 'A list of key value pairs that should be provided as a metadata to the new VM'},
      \  {'word': 'nics=', 'menu': 'A list of network id''s to which the VM''s interface should be attached'},
      \  {'word': 'region_name=', 'menu': 'Name of the region'},
      \  {'word': 'security_groups=', 'menu': 'The name of the security group to which the VM should be added'},
      \  {'word': 'state=', 'menu': 'Indicate desired state of the resource'},
      \  {'word': 'user_data=', 'menu': 'Opaque blob of data which is made available to the instance'},
      \  {'word': 'wait=', 'menu': 'If the module should wait for the VM to be created.'},
      \  {'word': 'wait_for=', 'menu': 'The amount of time the module should wait for the VM to get into active state'},
  \ ],
  \ 'nova_keypair': [
      \  {'word': 'auth_url=', 'menu': 'The keystone url for authentication'},
      \  {'word': 'public_key=', 'menu': 'The public key that would be uploaded to nova and injected to vm''s upon creation'},
      \  {'word': 'region_name=', 'menu': 'Name of the region'},
      \  {'word': 'state=', 'menu': 'Indicate desired state of the resource'},
  \ ],
  \ 'npm': [
      \  {'word': 'executable=', 'menu': 'The executable location for npm. This is useful if you are using a version manager, such as nvm'},
      \  {'word': 'global=', 'menu': 'Install the node.js library globally'},
      \  {'word': 'ignore_scripts=', 'menu': 'Use the --ignore-scripts flag when installing.'},
      \  {'word': 'name=', 'menu': 'The name of a node.js library to install'},
      \  {'word': 'path=', 'menu': 'The base path where to install the node.js libraries'},
      \  {'word': 'production=', 'menu': 'Install dependencies in production mode, excluding devDependencies'},
      \  {'word': 'registry=', 'menu': 'The registry to install modules from.'},
      \  {'word': 'state=', 'menu': 'The state of the node.js library'},
      \  {'word': 'version=', 'menu': 'The version to be installed'},
  \ ],
  \ 'ohai': [
  \ ],
  \ 'open_iscsi': [
      \  {'word': 'auto_node_startup=', 'menu': 'whether the target node should be automatically connected at startup'},
      \  {'word': 'discover=', 'menu': 'whether the list of target nodes on the portal should be (re)discovered and added to the persistent iscsi database. Keep in mind that iscsiadm discovery resets configurtion, like node.startup to manual, hence combined with auto_node_startup=yes will allways return a changed state.'},
      \  {'word': 'login=', 'menu': 'whether the target node should be connected'},
      \  {'word': 'node_auth=', 'menu': 'discovery.sendtargets.auth.authmethod'},
      \  {'word': 'node_pass=', 'menu': 'discovery.sendtargets.auth.password'},
      \  {'word': 'node_user=', 'menu': 'discovery.sendtargets.auth.username'},
      \  {'word': 'port=', 'menu': 'the port on which the iscsi target process listens'},
      \  {'word': 'portal=', 'menu': 'the ip address of the iscsi target'},
      \  {'word': 'show_nodes=', 'menu': 'whether the list of nodes in the persistent iscsi database should be returned by the module'},
      \  {'word': 'target=', 'menu': 'the iscsi target name'},
  \ ],
  \ 'openbsd_pkg': [
  \ ],
  \ 'openvswitch_bridge': [
      \  {'word': 'state=', 'menu': 'Whether the bridge should exist'},
      \  {'word': 'timeout=', 'menu': 'How long to wait for ovs-vswitchd to respond'},
  \ ],
  \ 'openvswitch_port': [
      \  {'word': 'state=', 'menu': 'Whether the port should exist'},
      \  {'word': 'timeout=', 'menu': 'How long to wait for ovs-vswitchd to respond'},
  \ ],
  \ 'opkg': [
      \  {'word': 'state=', 'menu': 'state of the package'},
      \  {'word': 'update_cache=', 'menu': 'update the package db first'},
  \ ],
  \ 'osx_say': [
      \  {'word': 'voice=', 'menu': 'W h a t   v o i c e   t o   u s e'},
  \ ],
  \ 'ovirt': [
      \  {'word': 'disk_alloc=', 'menu': 'define if disk is thin or preallocated'},
      \  {'word': 'disk_int=', 'menu': 'interface type of the disk'},
      \  {'word': 'image=', 'menu': 'template to use for the instance'},
      \  {'word': 'instance_cores=', 'menu': 'define the instance''s number of cores'},
      \  {'word': 'instance_cpus=', 'menu': 'the instance''s number of cpu''s'},
      \  {'word': 'instance_disksize=', 'menu': 'size of the instance''s disk in GB'},
      \  {'word': 'instance_mem=', 'menu': 'the instance''s amount of memory in MB'},
      \  {'word': 'instance_network=', 'menu': 'the logical network the machine should belong to'},
      \  {'word': 'instance_nic=', 'menu': 'name of the network interface in oVirt/RHEV'},
      \  {'word': 'instance_os=', 'menu': 'type of Operating System'},
      \  {'word': 'instance_type=', 'menu': 'define if the instance is a server or desktop'},
      \  {'word': 'region=', 'menu': 'the oVirt/RHEV datacenter where you want to deploy to'},
      \  {'word': 'resource_type=', 'menu': 'whether you want to deploy an image or create an instance from scratch.'},
      \  {'word': 'sdomain=', 'menu': 'the Storage Domain where you want to create the instance''s disk on.'},
      \  {'word': 'state=', 'menu': 'create, terminate or remove instances'},
      \  {'word': 'zone=', 'menu': 'deploy the image to this oVirt cluster'},
  \ ],
  \ 'pacman': [
      \  {'word': 'name=', 'menu': 'Name of the package to install, upgrade, or remove.'},
      \  {'word': 'recurse=', 'menu': 'When removing a package, also remove its dependencies, provided that they are not required by other packages and were not explicitly installed by a user.'},
      \  {'word': 'state=', 'menu': 'Desired state of the package.'},
      \  {'word': 'update_cache=', 'menu': 'Whether or not to refresh the master package lists. This can be run as part of a package installation or as a separate step.'},
  \ ],
  \ 'pagerduty': [
      \  {'word': 'desc=', 'menu': 'Short description of maintenance window.'},
      \  {'word': 'hours=', 'menu': 'Length of maintenance window in hours.'},
      \  {'word': 'minutes=', 'menu': 'Maintenance window in minutes (this is added to the hours).'},
      \  {'word': 'service=', 'menu': 'PagerDuty service ID.'},
      \  {'word': 'validate_certs=', 'menu': 'If `no'', SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.'},
  \ ],
  \ 'pause': [
      \  {'word': 'minutes=', 'menu': 'Number of minutes to pause for.'},
      \  {'word': 'prompt=', 'menu': 'Optional text to use for the prompt message.'},
      \  {'word': 'seconds=', 'menu': 'Number of seconds to pause for.'},
  \ ],
  \ 'ping': [
  \ ],
  \ 'pingdom': [
  \ ],
  \ 'pip': [
      \  {'word': 'chdir=', 'menu': 'cd into this directory before running the command'},
      \  {'word': 'executable=', 'menu': 'The explicit executable or a pathname to the executable to be used to run pip for a specific version of Python installed in the system. For example `pip-3.3'', if there are both Python 2.7 and 3.3 installations in the system and you want to run pip for the Python 3.3 installation.'},
      \  {'word': 'extra_args=', 'menu': 'Extra arguments passed to pip.'},
      \  {'word': 'name=', 'menu': 'The name of a Python library to install or the url of the remote package.'},
      \  {'word': 'requirements=', 'menu': 'The path to a pip requirements file'},
      \  {'word': 'state=', 'menu': 'The state of module'},
      \  {'word': 'version=', 'menu': 'The version number to install of the Python library specified in the `name'' parameter'},
      \  {'word': 'virtualenv=', 'menu': 'An optional path to a `virtualenv'' directory to install into'},
      \  {'word': 'virtualenv_command=', 'menu': 'The command or a pathname to the command to create the virtual environment with. For example `pyvenv'', `virtualenv'', `virtualenv2'', `~/bin/virtualenv'', `/usr/local/bin/virtualenv''.'},
      \  {'word': 'virtualenv_site_packages=', 'menu': 'Whether the virtual environment will inherit packages from the global site-packages directory.  Note that if this setting is changed on an already existing virtual environment it will not have any effect, the environment must be deleted and newly created.'},
  \ ],
  \ 'pkgin': [
      \  {'word': 'state=', 'menu': 'state of the package'},
  \ ],
  \ 'pkgng': [
      \  {'word': 'annotation=', 'menu': 'a comma-separated list of keyvalue-pairs of the form <+/-/:><key>[=<value>]. A ''+'' denotes adding an annotation, a ''-'' denotes removing an annotation, and '':'' denotes modifying an annotation. If setting or modifying annotations, a value must be provided.'},
      \  {'word': 'cached=', 'menu': 'use local package base or try to fetch an updated one'},
      \  {'word': 'pkgsite=', 'menu': 'for pkgng versions before 1.1.4, specify packagesite to use for downloading packages, if not specified, use settings from /usr/local/etc/pkg.conf for newer pkgng versions, specify a the name of a repository configured in /usr/local/etc/pkg/repos'},
      \  {'word': 'state=', 'menu': 'state of the package'},
  \ ],
  \ 'pkgutil': [
      \  {'word': 'site=', 'menu': 'Specifies the repository path to install the package from. Its global definition is done in `/etc/opt/csw/pkgutil.conf''.'},
  \ ],
  \ 'portage': [
      \  {'word': 'changed_use=', 'menu': 'Include installed packages where USE flags have changed, except when flags that the user has not enabled are added or removed (--changed-use)'},
      \  {'word': 'deep=', 'menu': 'Consider the entire dependency tree of packages (--deep)'},
      \  {'word': 'depclean=', 'menu': 'Remove packages not needed by explicitly merged packages (--depclean) If no package is specified, clean up the world''s dependencies Otherwise, --depclean serves as a dependency aware version of --unmerge'},
      \  {'word': 'newuse=', 'menu': 'Include installed packages where USE flags have changed (--newuse)'},
      \  {'word': 'nodeps=', 'menu': 'Only merge packages but not their dependencies (--nodeps)'},
      \  {'word': 'noreplace=', 'menu': 'Do not re-emerge installed packages (--noreplace)'},
      \  {'word': 'oneshot=', 'menu': 'Do not add the packages to the world file (--oneshot)'},
      \  {'word': 'onlydeps=', 'menu': 'Only merge packages'' dependencies but not the packages (--onlydeps)'},
      \  {'word': 'package=', 'menu': 'Package atom or set, e.g. `sys-apps/foo'' or `>foo-2.13'' or `@world'''},
      \  {'word': 'quiet=', 'menu': 'Run emerge in quiet mode (--quiet)'},
      \  {'word': 'state=', 'menu': 'State of the package atom'},
      \  {'word': 'sync=', 'menu': 'Sync package repositories first If yes, perform "emerge --sync" If web, perform "emerge-webrsync"'},
      \  {'word': 'update=', 'menu': 'Update packages to the best version available (--update)'},
      \  {'word': 'verbose=', 'menu': 'Run emerge in verbose mode (--verbose)'},
  \ ],
  \ 'portinstall': [
      \  {'word': 'state=', 'menu': 'state of the package'},
      \  {'word': 'use_packages=', 'menu': 'use packages instead of ports whenever available'},
  \ ],
  \ 'postgresql_db': [
      \  {'word': 'encoding=', 'menu': 'Encoding of the database'},
      \  {'word': 'lc_collate=', 'menu': 'Collation order (LC_COLLATE) to use in the database. Must match collation order of template database unless `template0'' is used as template.'},
      \  {'word': 'lc_ctype=', 'menu': 'Character classification (LC_CTYPE) to use in the database (e.g. lower, upper, ...) Must match LC_CTYPE of template database unless `template0'' is used as template.'},
      \  {'word': 'login_host=', 'menu': 'Host running the database'},
      \  {'word': 'login_password=', 'menu': 'The password used to authenticate with'},
      \  {'word': 'login_user=', 'menu': 'The username used to authenticate with'},
      \  {'word': 'owner=', 'menu': 'Name of the role to set as owner of the database'},
      \  {'word': 'port=', 'menu': 'Database port to connect to.'},
      \  {'word': 'state=', 'menu': 'The database state'},
      \  {'word': 'template=', 'menu': 'Template used to create the database'},
  \ ],
  \ 'postgresql_privs': [
      \  {'word': 'grant_option=', 'menu': 'Whether `role'' may grant/revoke the specified privileges/group memberships to others. Set to `no'' to revoke GRANT OPTION, leave unspecified to make no changes. `grant_option'' only has an effect if `state'' is `present''. Alias: `admin_option'''},
      \  {'word': 'host=', 'menu': 'Database host address. If unspecified, connect via Unix socket. Alias: `login_host'''},
      \  {'word': 'login=', 'menu': 'The username to authenticate with. Alias: `login_user'''},
      \  {'word': 'objs=', 'menu': 'Comma separated list of database objects to set privileges on. If `type'' is `table'' or `sequence'', the special value `ALL_IN_SCHEMA'' can be provided instead to specify all database objects of type `type'' in the schema specified via `schema''. (This also works with PostgreSQL < 9.0.) If `type'' is `database'', this parameter can be omitted, in which case privileges are set for the database specified via `database''. If `type'' is `function'', colons (":") in object names will be replaced with commas (needed to specify function signatures, see examples) Alias: `obj'''},
      \  {'word': 'password=', 'menu': 'The password to authenticate with. Alias: `login_password'')'},
      \  {'word': 'port=', 'menu': 'Database port to connect to.'},
      \  {'word': 'privs=', 'menu': 'Comma separated list of privileges to grant/revoke. Alias: `priv'''},
      \  {'word': 'schema=', 'menu': 'Schema that contains the database objects specified via `objs''. May only be provided if `type'' is `table'', `sequence'' or `function''. Defaults to  `public'' in these cases.'},
      \  {'word': 'state=', 'menu': 'If `present'', the specified privileges are granted, if `absent'' they are revoked.'},
      \  {'word': 'type=', 'menu': 'Type of database object to set privileges on.'},
  \ ],
  \ 'postgresql_user': [
      \  {'word': 'db=', 'menu': 'name of database where permissions will be granted'},
      \  {'word': 'encrypted=', 'menu': 'denotes if the password is already encrypted. boolean.'},
      \  {'word': 'expires=', 'menu': 'sets the user''s password expiration.'},
      \  {'word': 'fail_on_user=', 'menu': 'if `yes'', fail when user can''t be removed. Otherwise just log and continue'},
      \  {'word': 'login_host=', 'menu': 'Host running PostgreSQL.'},
      \  {'word': 'login_password=', 'menu': 'Password used to authenticate with PostgreSQL'},
      \  {'word': 'login_user=', 'menu': 'User (role) used to authenticate with PostgreSQL'},
      \  {'word': 'password=', 'menu': 'set the user''s password, before 1.4 this was required. When passing an encrypted password, the encrypted parameter must also be true, and it must be generated with the format `''str["md5"] + md5[ password + username ]'''', resulting in a total of 35 characters.  An easy way to do this is: `echo "md5`echo -n "verysecretpasswordJOE" | md5`"''.'},
      \  {'word': 'port=', 'menu': 'Database port to connect to.'},
      \  {'word': 'priv=', 'menu': 'PostgreSQL privileges string in the format: `table:priv1,priv2'''},
      \  {'word': 'role_attr_flags=', 'menu': 'PostgreSQL role attributes string in the format: CREATEDB,CREATEROLE,SUPERUSER'},
      \  {'word': 'state=', 'menu': 'The user (role) state'},
  \ ],
  \ 'quantum_floating_ip': [
      \  {'word': 'auth_url=', 'menu': 'The keystone url for authentication'},
      \  {'word': 'internal_network_name=', 'menu': 'The name of the network of the port to associate with the floating ip. Necessary when VM multiple networks.'},
      \  {'word': 'region_name=', 'menu': 'Name of the region'},
      \  {'word': 'state=', 'menu': 'Indicate desired state of the resource'},
  \ ],
  \ 'quantum_floating_ip_associate': [
      \  {'word': 'auth_url=', 'menu': 'the keystone url for authentication'},
      \  {'word': 'region_name=', 'menu': 'name of the region'},
      \  {'word': 'state=', 'menu': 'indicates the desired state of the resource'},
  \ ],
  \ 'quantum_network': [
      \  {'word': 'admin_state_up=', 'menu': 'Whether the state should be marked as up or down'},
      \  {'word': 'auth_url=', 'menu': 'The keystone url for authentication'},
      \  {'word': 'provider_network_type=', 'menu': 'The type of the network to be created, gre, vlan, local. Available types depend on the plugin. The Quantum service decides if not specified.'},
      \  {'word': 'provider_physical_network=', 'menu': 'The physical network which would realize the virtual network for flat and vlan networks.'},
      \  {'word': 'provider_segmentation_id=', 'menu': 'The id that has to be assigned to the network, in case of vlan networks that would be vlan id and for gre the tunnel id'},
      \  {'word': 'region_name=', 'menu': 'Name of the region'},
      \  {'word': 'router_external=', 'menu': 'If ''yes'', specifies that the virtual network is a external network (public).'},
      \  {'word': 'shared=', 'menu': 'Whether this network is shared or not'},
      \  {'word': 'state=', 'menu': 'Indicate desired state of the resource'},
      \  {'word': 'tenant_name=', 'menu': 'The name of the tenant for whom the network is created'},
  \ ],
  \ 'quantum_router': [
      \  {'word': 'admin_state_up=', 'menu': 'desired admin state of the created router .'},
      \  {'word': 'auth_url=', 'menu': 'The keystone url for authentication'},
      \  {'word': 'region_name=', 'menu': 'Name of the region'},
      \  {'word': 'state=', 'menu': 'Indicate desired state of the resource'},
      \  {'word': 'tenant_name=', 'menu': 'Name of the tenant for which the router has to be created, if none router would be created for the login tenant.'},
  \ ],
  \ 'quantum_router_gateway': [
      \  {'word': 'auth_url=', 'menu': 'The keystone URL for authentication'},
      \  {'word': 'region_name=', 'menu': 'Name of the region'},
      \  {'word': 'state=', 'menu': 'Indicate desired state of the resource'},
  \ ],
  \ 'quantum_router_interface': [
      \  {'word': 'auth_url=', 'menu': 'The keystone URL for authentication'},
      \  {'word': 'region_name=', 'menu': 'Name of the region'},
      \  {'word': 'state=', 'menu': 'Indicate desired state of the resource'},
      \  {'word': 'tenant_name=', 'menu': 'Name of the tenant whose subnet has to be attached.'},
  \ ],
  \ 'quantum_subnet': [
      \  {'word': 'allocation_pool_end=', 'menu': 'From the subnet pool the last IP that should be assigned to the virtual machines'},
      \  {'word': 'allocation_pool_start=', 'menu': 'From the subnet pool the starting address from which the IP should be allocated'},
      \  {'word': 'auth_url=', 'menu': 'The keystone URL for authentication'},
      \  {'word': 'dns_nameservers=', 'menu': 'DNS nameservers for this subnet, comma-separated'},
      \  {'word': 'enable_dhcp=', 'menu': 'Whether DHCP should be enabled for this subnet.'},
      \  {'word': 'gateway_ip=', 'menu': 'The ip that would be assigned to the gateway for this subnet'},
      \  {'word': 'ip_version=', 'menu': 'The IP version of the subnet 4 or 6'},
      \  {'word': 'region_name=', 'menu': 'Name of the region'},
      \  {'word': 'state=', 'menu': 'Indicate desired state of the resource'},
      \  {'word': 'tenant_name=', 'menu': 'The name of the tenant for whom the subnet should be created'},
  \ ],
  \ 'rabbitmq_parameter': [
      \  {'word': 'node=', 'menu': 'erlang node name of the rabbit we wish to configure'},
      \  {'word': 'state=', 'menu': 'Specify if user is to be added or removed'},
      \  {'word': 'value=', 'menu': 'Value of the parameter, as a JSON term'},
      \  {'word': 'vhost=', 'menu': 'vhost to apply access privileges.'},
  \ ],
  \ 'rabbitmq_plugin': [
      \  {'word': 'new_only=', 'menu': 'Only enable missing plugins Does not disable plugins that are not in the names list'},
      \  {'word': 'prefix=', 'menu': 'Specify a custom install prefix to a Rabbit'},
      \  {'word': 'state=', 'menu': 'Specify if plugins are to be enabled or disabled'},
  \ ],
  \ 'rabbitmq_policy': [
      \  {'word': 'node=', 'menu': 'Erlang node name of the rabbit we wish to configure.'},
      \  {'word': 'priority=', 'menu': 'The priority of the policy.'},
      \  {'word': 'state=', 'menu': 'The state of the policy.'},
      \  {'word': 'vhost=', 'menu': 'The name of the vhost to apply to.'},
  \ ],
  \ 'rabbitmq_user': [
      \  {'word': 'configure_priv=', 'menu': 'Regular expression to restrict configure actions on a resource for the specified vhost. By default all actions are restricted.'},
      \  {'word': 'force=', 'menu': 'Deletes and recreates the user.'},
      \  {'word': 'node=', 'menu': 'erlang node name of the rabbit we wish to configure'},
      \  {'word': 'password=', 'menu': 'Password of user to add. To change the password of an existing user, you must also specify `force=yes''.'},
      \  {'word': 'read_priv=', 'menu': 'Regular expression to restrict configure actions on a resource for the specified vhost. By default all actions are restricted.'},
      \  {'word': 'state=', 'menu': 'Specify if user is to be added or removed'},
      \  {'word': 'tags=', 'menu': 'User tags specified as comma delimited'},
      \  {'word': 'vhost=', 'menu': 'vhost to apply access privileges.'},
      \  {'word': 'write_priv=', 'menu': 'Regular expression to restrict configure actions on a resource for the specified vhost. By default all actions are restricted.'},
  \ ],
  \ 'rabbitmq_vhost': [
      \  {'word': 'node=', 'menu': 'erlang node name of the rabbit we wish to configure'},
      \  {'word': 'state=', 'menu': 'The state of vhost'},
      \  {'word': 'tracing=', 'menu': 'Enable/disable tracing for a vhost'},
  \ ],
  \ 'raw': [
      \  {'word': 'executable=', 'menu': 'change the shell used to execute the command. Should be an absolute path to the executable.'},
  \ ],
  \ 'rax': [
      \  {'word': 'api_key=', 'menu': 'Rackspace API key (overrides `credentials'')'},
      \  {'word': 'auth_endpoint=', 'menu': 'The URI of the authentication service'},
      \  {'word': 'auto_increment=', 'menu': 'Whether or not to increment a single number with the name of the created servers. Only applicable when used with the `group'' attribute or meta key.'},
      \  {'word': 'config_drive=', 'menu': 'Attach read-only configuration drive to server as label config-2'},
      \  {'word': 'count=', 'menu': 'number of instances to launch'},
      \  {'word': 'count_offset=', 'menu': 'number count to start at'},
      \  {'word': 'credentials=', 'menu': 'File to find the Rackspace credentials in (ignored if `api_key'' and `username'' are provided)'},
      \  {'word': 'disk_config=', 'menu': 'Disk partitioning strategy'},
      \  {'word': 'env=', 'menu': 'Environment as configured in ~/.pyrax.cfg, see https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration'},
      \  {'word': 'exact_count=', 'menu': 'Explicitly ensure an exact count of instances, used with state=active/present. If specified as `yes'' and `count'' is less than the servers matched, servers will be deleted to match the count. If the number of matched servers is fewer than specified in `count'' additional servers will be added.'},
      \  {'word': 'extra_client_args=', 'menu': 'A hash of key/value pairs to be used when creating the cloudservers client. This is considered an advanced option, use it wisely and with caution.'},
      \  {'word': 'extra_create_args=', 'menu': 'A hash of key/value pairs to be used when creating a new server. This is considered an advanced option, use it wisely and with caution.'},
      \  {'word': 'files=', 'menu': 'Files to insert into the instance. remotefilename:localcontent'},
      \  {'word': 'flavor=', 'menu': 'flavor to use for the instance'},
      \  {'word': 'group=', 'menu': 'host group to assign to server, is also used for idempotent operations to ensure a specific number of instances'},
      \  {'word': 'identity_type=', 'menu': 'Authentication machanism to use, such as rackspace or keystone'},
      \  {'word': 'image=', 'menu': 'image to use for the instance. Can be an `id'', `human_id'' or `name'''},
      \  {'word': 'instance_ids=', 'menu': 'list of instance ids, currently only used when state=''absent'' to remove instances'},
      \  {'word': 'key_name=', 'menu': 'key pair to use on the instance'},
      \  {'word': 'meta=', 'menu': 'A hash of metadata to associate with the instance'},
      \  {'word': 'name=', 'menu': 'Name to give the instance'},
      \  {'word': 'networks=', 'menu': 'The network to attach to the instances. If specified, you must include ALL networks including the public and private interfaces. Can be `id'' or `label''.'},
      \  {'word': 'region=', 'menu': 'Region to create an instance in'},
      \  {'word': 'state=', 'menu': 'Indicate desired state of the resource'},
      \  {'word': 'tenant_id=', 'menu': 'The tenant ID used for authentication'},
      \  {'word': 'tenant_name=', 'menu': 'The tenant name used for authentication'},
      \  {'word': 'user_data=', 'menu': 'Data to be uploaded to the servers config drive. This option implies `config_drive''. Can be a file path or a string'},
      \  {'word': 'username=', 'menu': 'Rackspace username (overrides `credentials'')'},
      \  {'word': 'verify_ssl=', 'menu': 'Whether or not to require SSL validation of API endpoints'},
      \  {'word': 'wait=', 'menu': 'wait for the instance to be in state ''running'' before returning'},
      \  {'word': 'wait_timeout=', 'menu': 'how long before wait gives up, in seconds'},
  \ ],
  \ 'rax_cbs': [
      \  {'word': 'api_key=', 'menu': 'Rackspace API key (overrides `credentials'')'},
      \  {'word': 'auth_endpoint=', 'menu': 'The URI of the authentication service'},
      \  {'word': 'credentials=', 'menu': 'File to find the Rackspace credentials in (ignored if `api_key'' and `username'' are provided)'},
      \  {'word': 'description=', 'menu': 'Description to give the volume being created'},
      \  {'word': 'env=', 'menu': 'Environment as configured in ~/.pyrax.cfg, see https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration'},
      \  {'word': 'identity_type=', 'menu': 'Authentication machanism to use, such as rackspace or keystone'},
      \  {'word': 'meta=', 'menu': 'A hash of metadata to associate with the volume'},
      \  {'word': 'region=', 'menu': 'Region to create an instance in'},
      \  {'word': 'snapshot_id=', 'menu': 'The id of the snapshot to create the volume from'},
      \  {'word': 'tenant_id=', 'menu': 'The tenant ID used for authentication'},
      \  {'word': 'tenant_name=', 'menu': 'The tenant name used for authentication'},
      \  {'word': 'username=', 'menu': 'Rackspace username (overrides `credentials'')'},
      \  {'word': 'verify_ssl=', 'menu': 'Whether or not to require SSL validation of API endpoints'},
      \  {'word': 'wait=', 'menu': 'wait for the volume to be in state ''available'' before returning'},
      \  {'word': 'wait_timeout=', 'menu': 'how long before wait gives up, in seconds'},
  \ ],
  \ 'rax_cbs_attachments': [
      \  {'word': 'api_key=', 'menu': 'Rackspace API key (overrides `credentials'')'},
      \  {'word': 'auth_endpoint=', 'menu': 'The URI of the authentication service'},
      \  {'word': 'credentials=', 'menu': 'File to find the Rackspace credentials in (ignored if `api_key'' and `username'' are provided)'},
      \  {'word': 'env=', 'menu': 'Environment as configured in ~/.pyrax.cfg, see https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration'},
      \  {'word': 'identity_type=', 'menu': 'Authentication machanism to use, such as rackspace or keystone'},
      \  {'word': 'region=', 'menu': 'Region to create an instance in'},
      \  {'word': 'tenant_id=', 'menu': 'The tenant ID used for authentication'},
      \  {'word': 'tenant_name=', 'menu': 'The tenant name used for authentication'},
      \  {'word': 'username=', 'menu': 'Rackspace username (overrides `credentials'')'},
      \  {'word': 'verify_ssl=', 'menu': 'Whether or not to require SSL validation of API endpoints'},
      \  {'word': 'wait=', 'menu': 'wait for the volume to be in ''in-use''/''available'' state before returning'},
      \  {'word': 'wait_timeout=', 'menu': 'how long before wait gives up, in seconds'},
  \ ],
  \ 'rax_cdb': [
      \  {'word': 'api_key=', 'menu': 'Rackspace API key (overrides `credentials'')'},
      \  {'word': 'credentials=', 'menu': 'File to find the Rackspace credentials in (ignored if `api_key'' and `username'' are provided)'},
      \  {'word': 'env=', 'menu': 'Environment as configured in ~/.pyrax.cfg, see https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration'},
      \  {'word': 'flavor=', 'menu': 'flavor to use for the instance 1 to 6 (i.e. 512MB to 16GB)'},
      \  {'word': 'name=', 'menu': 'Name of the databases server instance'},
      \  {'word': 'region=', 'menu': 'Region to create an instance in'},
      \  {'word': 'state=', 'menu': 'Indicate desired state of the resource'},
      \  {'word': 'username=', 'menu': 'Rackspace username (overrides `credentials'')'},
      \  {'word': 'verify_ssl=', 'menu': 'Whether or not to require SSL validation of API endpoints'},
      \  {'word': 'volume=', 'menu': 'Volume size of the database 1-150GB'},
      \  {'word': 'wait=', 'menu': 'wait for the instance to be in state ''running'' before returning'},
      \  {'word': 'wait_timeout=', 'menu': 'how long before wait gives up, in seconds'},
  \ ],
  \ 'rax_cdb_database': [
      \  {'word': 'api_key=', 'menu': 'Rackspace API key (overrides `credentials'')'},
      \  {'word': 'cdb_id=', 'menu': 'The databases server UUID'},
      \  {'word': 'character_set=', 'menu': 'Set of symbols and encodings'},
      \  {'word': 'collate=', 'menu': 'Set of rules for comparing characters in a character set'},
      \  {'word': 'credentials=', 'menu': 'File to find the Rackspace credentials in (ignored if `api_key'' and `username'' are provided)'},
      \  {'word': 'env=', 'menu': 'Environment as configured in ~/.pyrax.cfg, see https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration'},
      \  {'word': 'name=', 'menu': 'Name to give to the database'},
      \  {'word': 'region=', 'menu': 'Region to create an instance in'},
      \  {'word': 'state=', 'menu': 'Indicate desired state of the resource'},
      \  {'word': 'username=', 'menu': 'Rackspace username (overrides `credentials'')'},
      \  {'word': 'verify_ssl=', 'menu': 'Whether or not to require SSL validation of API endpoints'},
  \ ],
  \ 'rax_cdb_user': [
      \  {'word': 'api_key=', 'menu': 'Rackspace API key (overrides `credentials'')'},
      \  {'word': 'cdb_id=', 'menu': 'The databases server UUID'},
      \  {'word': 'credentials=', 'menu': 'File to find the Rackspace credentials in (ignored if `api_key'' and `username'' are provided)'},
      \  {'word': 'databases=', 'menu': 'Name of the databases that the user can access'},
      \  {'word': 'db_password=', 'menu': 'Database user password'},
      \  {'word': 'db_username=', 'menu': 'Name of the database user'},
      \  {'word': 'env=', 'menu': 'Environment as configured in ~/.pyrax.cfg, see https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration'},
      \  {'word': 'host=', 'menu': 'Specifies the host from which a user is allowed to connect to the database. Possible values are a string containing an IPv4 address or "%" to allow connecting from any host'},
      \  {'word': 'region=', 'menu': 'Region to create an instance in'},
      \  {'word': 'state=', 'menu': 'Indicate desired state of the resource'},
      \  {'word': 'username=', 'menu': 'Rackspace username (overrides `credentials'')'},
      \  {'word': 'verify_ssl=', 'menu': 'Whether or not to require SSL validation of API endpoints'},
  \ ],
  \ 'rax_clb': [
      \  {'word': 'algorithm=', 'menu': 'algorithm for the balancer being created'},
      \  {'word': 'api_key=', 'menu': 'Rackspace API key (overrides `credentials'')'},
      \  {'word': 'credentials=', 'menu': 'File to find the Rackspace credentials in (ignored if `api_key'' and `username'' are provided)'},
      \  {'word': 'env=', 'menu': 'Environment as configured in ~/.pyrax.cfg, see https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration'},
      \  {'word': 'meta=', 'menu': 'A hash of metadata to associate with the instance'},
      \  {'word': 'name=', 'menu': 'Name to give the load balancer'},
      \  {'word': 'port=', 'menu': 'Port for the balancer being created'},
      \  {'word': 'protocol=', 'menu': 'Protocol for the balancer being created'},
      \  {'word': 'region=', 'menu': 'Region to create an instance in'},
      \  {'word': 'state=', 'menu': 'Indicate desired state of the resource'},
      \  {'word': 'timeout=', 'menu': 'timeout for communication between the balancer and the node'},
      \  {'word': 'type=', 'menu': 'type of interface for the balancer being created'},
      \  {'word': 'username=', 'menu': 'Rackspace username (overrides `credentials'')'},
      \  {'word': 'verify_ssl=', 'menu': 'Whether or not to require SSL validation of API endpoints'},
      \  {'word': 'vip_id=', 'menu': 'Virtual IP ID to use when creating the load balancer for purposes of sharing an IP with another load balancer of another protocol'},
      \  {'word': 'wait=', 'menu': 'wait for the balancer to be in state ''running'' before returning'},
      \  {'word': 'wait_timeout=', 'menu': 'how long before wait gives up, in seconds'},
  \ ],
  \ 'rax_clb_nodes': [
      \  {'word': 'address=', 'menu': 'IP address or domain name of the node'},
      \  {'word': 'api_key=', 'menu': 'Rackspace API key (overrides `credentials'')'},
      \  {'word': 'condition=', 'menu': 'Condition for the node, which determines its role within the load balancer'},
      \  {'word': 'credentials=', 'menu': 'File to find the Rackspace credentials in (ignored if `api_key'' and `username'' are provided)'},
      \  {'word': 'env=', 'menu': 'Environment as configured in ~/.pyrax.cfg, see https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration'},
      \  {'word': 'node_id=', 'menu': 'Node id'},
      \  {'word': 'port=', 'menu': 'Port number of the load balanced service on the node'},
      \  {'word': 'region=', 'menu': 'Region to create an instance in'},
      \  {'word': 'state=', 'menu': 'Indicate desired state of the node'},
      \  {'word': 'type=', 'menu': 'Type of node'},
      \  {'word': 'username=', 'menu': 'Rackspace username (overrides `credentials'')'},
      \  {'word': 'verify_ssl=', 'menu': 'Whether or not to require SSL validation of API endpoints'},
      \  {'word': 'wait=', 'menu': 'Wait for the load balancer to become active before returning'},
      \  {'word': 'wait_timeout=', 'menu': 'How long to wait before giving up and returning an error'},
      \  {'word': 'weight=', 'menu': 'Weight of node'},
  \ ],
  \ 'rax_dns_record': [
      \  {'word': 'api_key=', 'menu': 'Rackspace API key (overrides `credentials'')'},
      \  {'word': 'comment=', 'menu': 'Brief description of the domain. Maximum length of 160 characters'},
      \  {'word': 'credentials=', 'menu': 'File to find the Rackspace credentials in (ignored if `api_key'' and `username'' are provided)'},
      \  {'word': 'domain=', 'menu': 'Domain name to create the record in. This is an invalid option when type=PTR'},
      \  {'word': 'env=', 'menu': 'Environment as configured in ~/.pyrax.cfg, see https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration'},
      \  {'word': 'loadbalancer=', 'menu': 'Load Balancer ID to create a PTR record for. Only used with type=PTR'},
      \  {'word': 'priority=', 'menu': 'Required for MX and SRV records, but forbidden for other record types. If specified, must be an integer from 0 to 65535.'},
      \  {'word': 'region=', 'menu': 'Region to create an instance in'},
      \  {'word': 'server=', 'menu': 'Server ID to create a PTR record for. Only used with type=PTR'},
      \  {'word': 'state=', 'menu': 'Indicate desired state of the resource'},
      \  {'word': 'ttl=', 'menu': 'Time to live of record in seconds'},
      \  {'word': 'username=', 'menu': 'Rackspace username (overrides `credentials'')'},
      \  {'word': 'verify_ssl=', 'menu': 'Whether or not to require SSL validation of API endpoints'},
  \ ],
  \ 'rax_facts': [
      \  {'word': 'address=', 'menu': 'Server IP address to retrieve facts for, will match any IP assigned to the server'},
      \  {'word': 'api_key=', 'menu': 'Rackspace API key (overrides `credentials'')'},
      \  {'word': 'auth_endpoint=', 'menu': 'The URI of the authentication service'},
      \  {'word': 'credentials=', 'menu': 'File to find the Rackspace credentials in (ignored if `api_key'' and `username'' are provided)'},
      \  {'word': 'env=', 'menu': 'Environment as configured in ~/.pyrax.cfg, see https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration'},
      \  {'word': 'id=', 'menu': 'Server ID to retrieve facts for'},
      \  {'word': 'identity_type=', 'menu': 'Authentication machanism to use, such as rackspace or keystone'},
      \  {'word': 'name=', 'menu': 'Server name to retrieve facts for'},
      \  {'word': 'region=', 'menu': 'Region to create an instance in'},
      \  {'word': 'tenant_id=', 'menu': 'The tenant ID used for authentication'},
      \  {'word': 'tenant_name=', 'menu': 'The tenant name used for authentication'},
      \  {'word': 'username=', 'menu': 'Rackspace username (overrides `credentials'')'},
      \  {'word': 'verify_ssl=', 'menu': 'Whether or not to require SSL validation of API endpoints'},
  \ ],
  \ 'rax_files': [
      \  {'word': 'api_key=', 'menu': 'Rackspace API key (overrides `credentials'')'},
      \  {'word': 'clear_meta=', 'menu': 'Optionally clear existing metadata when applying metadata to existing containers. Selecting this option is only appropriate when setting type=meta'},
      \  {'word': 'credentials=', 'menu': 'File to find the Rackspace credentials in (ignored if `api_key'' and `username'' are provided)'},
      \  {'word': 'env=', 'menu': 'Environment as configured in ~/.pyrax.cfg, see https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration'},
      \  {'word': 'meta=', 'menu': 'A hash of items to set as metadata values on a container'},
      \  {'word': 'private=', 'menu': 'Used to set a container as private, removing it from the CDN.  *Warning!* Private containers, if previously made public, can have live objects available until the TTL on cached objects expires'},
      \  {'word': 'public=', 'menu': 'Used to set a container as public, available via the Cloud Files CDN'},
      \  {'word': 'region=', 'menu': 'Region to create an instance in'},
      \  {'word': 'state=', 'menu': 'Indicate desired state of the resource'},
      \  {'word': 'ttl=', 'menu': 'In seconds, set a container-wide TTL for all objects cached on CDN edge nodes. Setting a TTL is only appropriate for containers that are public'},
      \  {'word': 'type=', 'menu': 'Type of object to do work on, i.e. metadata object or a container object'},
      \  {'word': 'username=', 'menu': 'Rackspace username (overrides `credentials'')'},
      \  {'word': 'verify_ssl=', 'menu': 'Whether or not to require SSL validation of API endpoints'},
      \  {'word': 'web_error=', 'menu': 'Sets an object to be presented as the HTTP error page when accessed by the CDN URL'},
      \  {'word': 'web_index=', 'menu': 'Sets an object to be presented as the HTTP index page when accessed by the CDN URL'},
  \ ],
  \ 'rax_files_objects': [
      \  {'word': 'api_key=', 'menu': 'Rackspace API key (overrides `credentials'')'},
      \  {'word': 'clear_meta=', 'menu': 'Optionally clear existing metadata when applying metadata to existing objects. Selecting this option is only appropriate when setting type=meta'},
      \  {'word': 'credentials=', 'menu': 'File to find the Rackspace credentials in (ignored if `api_key'' and `username'' are provided)'},
      \  {'word': 'dest=', 'menu': 'The destination of a "get" operation; i.e. a local directory, "/home/user/myfolder". Used to specify the destination of an operation on a remote object; i.e. a file name, "file1", or a comma-separated list of remote objects, "file1,file2,file17"'},
      \  {'word': 'env=', 'menu': 'Environment as configured in ~/.pyrax.cfg, see https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration'},
      \  {'word': 'expires=', 'menu': 'Used to set an expiration on a file or folder uploaded to Cloud Files. Requires an integer, specifying expiration in seconds'},
      \  {'word': 'meta=', 'menu': 'A hash of items to set as metadata values on an uploaded file or folder'},
      \  {'word': 'method=', 'menu': 'The method of operation to be performed.  For example, put to upload files to Cloud Files, get to download files from Cloud Files or delete to delete remote objects in Cloud Files'},
      \  {'word': 'region=', 'menu': 'Region to create an instance in'},
      \  {'word': 'src=', 'menu': 'Source from which to upload files.  Used to specify a remote object as a source for an operation, i.e. a file name, "file1", or a comma-separated list of remote objects, "file1,file2,file17".  src and dest are mutually exclusive on remote-only object operations'},
      \  {'word': 'state=', 'menu': 'Indicate desired state of the resource'},
      \  {'word': 'structure=', 'menu': 'Used to specify whether to maintain nested directory structure when downloading objects from Cloud Files.  Setting to false downloads the contents of a container to a single, flat directory'},
      \  {'word': 'type=', 'menu': 'Type of object to do work on Metadata object or a file object'},
      \  {'word': 'username=', 'menu': 'Rackspace username (overrides `credentials'')'},
      \  {'word': 'verify_ssl=', 'menu': 'Whether or not to require SSL validation of API endpoints'},
  \ ],
  \ 'rax_identity': [
      \  {'word': 'api_key=', 'menu': 'Rackspace API key (overrides `credentials'')'},
      \  {'word': 'auth_endpoint=', 'menu': 'The URI of the authentication service'},
      \  {'word': 'credentials=', 'menu': 'File to find the Rackspace credentials in (ignored if `api_key'' and `username'' are provided)'},
      \  {'word': 'env=', 'menu': 'Environment as configured in ~/.pyrax.cfg, see https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration'},
      \  {'word': 'identity_type=', 'menu': 'Authentication machanism to use, such as rackspace or keystone'},
      \  {'word': 'region=', 'menu': 'Region to create an instance in'},
      \  {'word': 'state=', 'menu': 'Indicate desired state of the resource'},
      \  {'word': 'tenant_id=', 'menu': 'The tenant ID used for authentication'},
      \  {'word': 'tenant_name=', 'menu': 'The tenant name used for authentication'},
      \  {'word': 'username=', 'menu': 'Rackspace username (overrides `credentials'')'},
      \  {'word': 'verify_ssl=', 'menu': 'Whether or not to require SSL validation of API endpoints'},
  \ ],
  \ 'rax_keypair': [
      \  {'word': 'api_key=', 'menu': 'Rackspace API key (overrides `credentials'')'},
      \  {'word': 'auth_endpoint=', 'menu': 'The URI of the authentication service'},
      \  {'word': 'credentials=', 'menu': 'File to find the Rackspace credentials in (ignored if `api_key'' and `username'' are provided)'},
      \  {'word': 'env=', 'menu': 'Environment as configured in ~/.pyrax.cfg, see https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration'},
      \  {'word': 'identity_type=', 'menu': 'Authentication machanism to use, such as rackspace or keystone'},
      \  {'word': 'public_key=', 'menu': 'Public Key string to upload. Can be a file path or string'},
      \  {'word': 'region=', 'menu': 'Region to create an instance in'},
      \  {'word': 'state=', 'menu': 'Indicate desired state of the resource'},
      \  {'word': 'tenant_id=', 'menu': 'The tenant ID used for authentication'},
      \  {'word': 'tenant_name=', 'menu': 'The tenant name used for authentication'},
      \  {'word': 'username=', 'menu': 'Rackspace username (overrides `credentials'')'},
      \  {'word': 'verify_ssl=', 'menu': 'Whether or not to require SSL validation of API endpoints'},
  \ ],
  \ 'rax_meta': [
      \  {'word': 'address=', 'menu': 'Server IP address to modify metadata for, will match any IP assigned to the server'},
      \  {'word': 'api_key=', 'menu': 'Rackspace API key (overrides `credentials'')'},
      \  {'word': 'auth_endpoint=', 'menu': 'The URI of the authentication service'},
      \  {'word': 'credentials=', 'menu': 'File to find the Rackspace credentials in (ignored if `api_key'' and `username'' are provided)'},
      \  {'word': 'env=', 'menu': 'Environment as configured in ~/.pyrax.cfg, see https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration'},
      \  {'word': 'id=', 'menu': 'Server ID to modify metadata for'},
      \  {'word': 'identity_type=', 'menu': 'Authentication machanism to use, such as rackspace or keystone'},
      \  {'word': 'meta=', 'menu': 'A hash of metadata to associate with the instance'},
      \  {'word': 'name=', 'menu': 'Server name to modify metadata for'},
      \  {'word': 'region=', 'menu': 'Region to create an instance in'},
      \  {'word': 'tenant_id=', 'menu': 'The tenant ID used for authentication'},
      \  {'word': 'tenant_name=', 'menu': 'The tenant name used for authentication'},
      \  {'word': 'username=', 'menu': 'Rackspace username (overrides `credentials'')'},
      \  {'word': 'verify_ssl=', 'menu': 'Whether or not to require SSL validation of API endpoints'},
  \ ],
  \ 'rax_network': [
      \  {'word': 'api_key=', 'menu': 'Rackspace API key (overrides `credentials'')'},
      \  {'word': 'auth_endpoint=', 'menu': 'The URI of the authentication service'},
      \  {'word': 'cidr=', 'menu': 'cidr of the network being created'},
      \  {'word': 'credentials=', 'menu': 'File to find the Rackspace credentials in (ignored if `api_key'' and `username'' are provided)'},
      \  {'word': 'env=', 'menu': 'Environment as configured in ~/.pyrax.cfg, see https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration'},
      \  {'word': 'identity_type=', 'menu': 'Authentication machanism to use, such as rackspace or keystone'},
      \  {'word': 'label=', 'menu': 'Label (name) to give the network'},
      \  {'word': 'region=', 'menu': 'Region to create an instance in'},
      \  {'word': 'state=', 'menu': 'Indicate desired state of the resource'},
      \  {'word': 'tenant_id=', 'menu': 'The tenant ID used for authentication'},
      \  {'word': 'tenant_name=', 'menu': 'The tenant name used for authentication'},
      \  {'word': 'username=', 'menu': 'Rackspace username (overrides `credentials'')'},
      \  {'word': 'verify_ssl=', 'menu': 'Whether or not to require SSL validation of API endpoints'},
  \ ],
  \ 'rax_queue': [
      \  {'word': 'api_key=', 'menu': 'Rackspace API key (overrides `credentials'')'},
      \  {'word': 'credentials=', 'menu': 'File to find the Rackspace credentials in (ignored if `api_key'' and `username'' are provided)'},
      \  {'word': 'env=', 'menu': 'Environment as configured in ~/.pyrax.cfg, see https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration'},
      \  {'word': 'name=', 'menu': 'Name to give the queue'},
      \  {'word': 'region=', 'menu': 'Region to create an instance in'},
      \  {'word': 'state=', 'menu': 'Indicate desired state of the resource'},
      \  {'word': 'username=', 'menu': 'Rackspace username (overrides `credentials'')'},
      \  {'word': 'verify_ssl=', 'menu': 'Whether or not to require SSL validation of API endpoints'},
  \ ],
  \ 'rax_scaling_group': [
      \  {'word': 'api_key=', 'menu': 'Rackspace API key (overrides `credentials'')'},
      \  {'word': 'config_drive=', 'menu': 'Attach read-only configuration drive to server as label config-2'},
      \  {'word': 'cooldown=', 'menu': 'The period of time, in seconds, that must pass before any scaling can occur after the previous scaling. Must be an integer between 0 and 86400 (24 hrs).'},
      \  {'word': 'credentials=', 'menu': 'File to find the Rackspace credentials in (ignored if `api_key'' and `username'' are provided)'},
      \  {'word': 'disk_config=', 'menu': 'Disk partitioning strategy'},
      \  {'word': 'env=', 'menu': 'Environment as configured in ~/.pyrax.cfg, see https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration'},
      \  {'word': 'files=', 'menu': 'Files to insert into the instance. Hash of `remotepath: localpath'''},
      \  {'word': 'key_name=', 'menu': 'key pair to use on the instance'},
      \  {'word': 'loadbalancers=', 'menu': 'List of load balancer `id'' and `port'' hashes'},
      \  {'word': 'meta=', 'menu': 'A hash of metadata to associate with the instance'},
      \  {'word': 'networks=', 'menu': 'The network to attach to the instances. If specified, you must include ALL networks including the public and private interfaces. Can be `id'' or `label''.'},
      \  {'word': 'region=', 'menu': 'Region to create an instance in'},
      \  {'word': 'state=', 'menu': 'Indicate desired state of the resource'},
      \  {'word': 'user_data=', 'menu': 'Data to be uploaded to the servers config drive. This option implies `config_drive''. Can be a file path or a string'},
      \  {'word': 'username=', 'menu': 'Rackspace username (overrides `credentials'')'},
      \  {'word': 'verify_ssl=', 'menu': 'Whether or not to require SSL validation of API endpoints'},
  \ ],
  \ 'rax_scaling_policy': [
      \  {'word': 'api_key=', 'menu': 'Rackspace API key (overrides `credentials'')'},
      \  {'word': 'at=', 'menu': 'The UTC time when this policy will be executed. The time must be formatted according to `yyyy-MM-dd''T''HH:mm:ss.SSS'' such as `2013-05-19T08:07:08Z'''},
      \  {'word': 'change=', 'menu': 'The change, either as a number of servers or as a percentage, to make in the scaling group. If this is a percentage, you must set `is_percent'' to `true'' also.'},
      \  {'word': 'cooldown=', 'menu': 'The period of time, in seconds, that must pass before any scaling can occur after the previous scaling. Must be an integer between 0 and 86400 (24 hrs).'},
      \  {'word': 'credentials=', 'menu': 'File to find the Rackspace credentials in (ignored if `api_key'' and `username'' are provided)'},
      \  {'word': 'cron=', 'menu': 'The time when the policy will be executed, as a cron entry. For example, if this is parameter is set to `1 0 * * *'''},
      \  {'word': 'desired_capacity=', 'menu': 'The desired server capacity of the scaling the group; that is, how many servers should be in the scaling group.'},
      \  {'word': 'env=', 'menu': 'Environment as configured in ~/.pyrax.cfg, see https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration'},
      \  {'word': 'is_percent=', 'menu': 'Whether the value in `change'' is a percent value'},
      \  {'word': 'region=', 'menu': 'Region to create an instance in'},
      \  {'word': 'state=', 'menu': 'Indicate desired state of the resource'},
      \  {'word': 'username=', 'menu': 'Rackspace username (overrides `credentials'')'},
      \  {'word': 'verify_ssl=', 'menu': 'Whether or not to require SSL validation of API endpoints'},
  \ ],
  \ 'rds': [
      \  {'word': 'apply_immediately=', 'menu': 'Used only when command=modify.  If enabled, the modifications will be applied as soon as possible rather than waiting for the next preferred maintenance window.'},
      \  {'word': 'aws_access_key=', 'menu': 'AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used.'},
      \  {'word': 'aws_secret_key=', 'menu': 'AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used.'},
      \  {'word': 'backup_retention=', 'menu': 'Number of days backups are retained.  Set to 0 to disable backups.  Default is 1 day.  Valid range: 0-35. Used only when command=create or command=modify.'},
      \  {'word': 'backup_window=', 'menu': 'Backup window in format of hh24:mi-hh24:mi.  If not specified then a random backup window is assigned. Used only when command=create or command=modify.'},
      \  {'word': 'db_engine=', 'menu': 'The type of database.  Used only when command=create.'},
      \  {'word': 'db_name=', 'menu': 'Name of a database to create within the instance.  If not specified then no database is created. Used only when command=create.'},
      \  {'word': 'engine_version=', 'menu': 'Version number of the database engine to use. Used only when command=create. If not specified then the current Amazon RDS default engine version is used.'},
      \  {'word': 'instance_type=', 'menu': 'The instance type of the database.  Must be specified when command=create. Optional when command=replicate, command=modify or command=restore. If not specified then the replica inherits the same instance type as the source instance.'},
      \  {'word': 'iops=', 'menu': 'Specifies the number of IOPS for the instance.  Used only when command=create or command=modify. Must be an integer greater than 1000.'},
      \  {'word': 'license_model=', 'menu': 'The license model for this DB instance. Used only when command=create or command=restore.'},
      \  {'word': 'maint_window=', 'menu': 'Maintenance window in format of ddd:hh24:mi-ddd:hh24:mi.  (Example: Mon:22:00-Mon:23:15) If not specified then a random maintenance window is assigned. Used only when command=create or command=modify.'},
      \  {'word': 'multi_zone=', 'menu': 'Specifies if this is a Multi-availability-zone deployment. Can not be used in conjunction with zone parameter. Used only when command=create or command=modify.'},
      \  {'word': 'new_instance_name=', 'menu': 'Name to rename an instance to. Used only when command=modify.'},
      \  {'word': 'option_group=', 'menu': 'The name of the option group to use.  If not specified then the default option group is used. Used only when command=create.'},
      \  {'word': 'parameter_group=', 'menu': 'Name of the DB parameter group to associate with this instance.  If omitted then the RDS default DBParameterGroup will be used. Used only when command=create or command=modify.'},
      \  {'word': 'password=', 'menu': 'Password for the master database username. Used only when command=create or command=modify.'},
      \  {'word': 'port=', 'menu': 'Port number that the DB instance uses for connections.  Defaults to 3306 for mysql. Must be changed to 1521 for Oracle, 1443 for SQL Server, 5432 for PostgreSQL. Used only when command=create or command=replicate.'},
      \  {'word': 'security_groups=', 'menu': 'Comma separated list of one or more security groups.  Used only when command=create or command=modify.'},
      \  {'word': 'size=', 'menu': 'Size in gigabytes of the initial storage for the DB instance. Used only when command=create or command=modify.'},
      \  {'word': 'snapshot=', 'menu': 'Name of snapshot to take. When command=delete, if no snapshot name is provided then no snapshot is taken. Used only when command=delete or command=snapshot.'},
      \  {'word': 'source_instance=', 'menu': 'Name of the database to replicate. Used only when command=replicate.'},
      \  {'word': 'subnet=', 'menu': 'VPC subnet group.  If specified then a VPC instance is created. Used only when command=create.'},
      \  {'word': 'upgrade=', 'menu': 'Indicates that minor version upgrades should be applied automatically. Used only when command=create or command=replicate.'},
      \  {'word': 'username=', 'menu': 'Master database username. Used only when command=create.'},
      \  {'word': 'vpc_security_groups=', 'menu': 'Comma separated list of one or more vpc security group ids. Also requires `subnet` to be specified. Used only when command=create or command=modify.'},
      \  {'word': 'wait=', 'menu': 'When command=create, replicate, modify or restore then wait for the database to enter the ''available'' state.  When command=delete wait for the database to be terminated.'},
      \  {'word': 'wait_timeout=', 'menu': 'how long before wait gives up, in seconds'},
      \  {'word': 'zone=', 'menu': 'availability zone in which to launch the instance. Used only when command=create, command=replicate or command=restore.'},
  \ ],
  \ 'rds_param_group': [
      \  {'word': 'aws_access_key=', 'menu': 'AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used.'},
      \  {'word': 'aws_secret_key=', 'menu': 'AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used.'},
      \  {'word': 'description=', 'menu': 'Database parameter group description. Only set when a new group is added.'},
      \  {'word': 'engine=', 'menu': 'The type of database for this group. Required for state=present.'},
      \  {'word': 'immediate=', 'menu': 'Whether to apply the changes immediately, or after the next reboot of any associated instances.'},
      \  {'word': 'params=', 'menu': 'Map of parameter names and values. Numeric values may be represented as K for kilo (1024), M for mega (1024^2), G for giga (1024^3), or T for tera (1024^4), and these values will be expanded into the appropriate number before being set in the parameter group.'},
  \ ],
  \ 'rds_subnet_group': [
      \  {'word': 'aws_access_key=', 'menu': 'AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used.'},
      \  {'word': 'aws_secret_key=', 'menu': 'AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used.'},
      \  {'word': 'description=', 'menu': 'Database subnet group description. Only set when a new group is added.'},
      \  {'word': 'subnets=', 'menu': 'List of subnet IDs that make up the database subnet group.'},
  \ ],
  \ 'redhat_subscription': [
      \  {'word': 'activationkey=', 'menu': 'supply an activation key for use with registration'},
      \  {'word': 'autosubscribe=', 'menu': 'Upon successful registration, auto-consume available subscriptions'},
      \  {'word': 'password=', 'menu': 'Red Hat Network password'},
      \  {'word': 'pool=', 'menu': 'Specify a subscription pool name to consume.  Regular expressions accepted.'},
      \  {'word': 'rhsm_baseurl=', 'menu': 'Specify CDN baseurl'},
      \  {'word': 'server_hostname=', 'menu': 'Specify an alternative Red Hat Network server'},
      \  {'word': 'server_insecure=', 'menu': 'Allow traffic over insecure http'},
      \  {'word': 'state=', 'menu': 'whether to register and subscribe (`present''), or unregister (`absent'') a system'},
      \  {'word': 'username=', 'menu': 'Red Hat Network username'},
  \ ],
  \ 'redis': [
      \  {'word': 'db=', 'menu': 'The database to flush (used in db mode) [flush command]'},
      \  {'word': 'flush_mode=', 'menu': 'Type of flush (all the dbs in a redis instance or a specific one) [flush command]'},
      \  {'word': 'login_host=', 'menu': 'The host running the database'},
      \  {'word': 'login_password=', 'menu': 'The password used to authenticate with (usually not used)'},
      \  {'word': 'login_port=', 'menu': 'The port to connect to'},
      \  {'word': 'master_host=', 'menu': 'The host of the master instance [slave command]'},
      \  {'word': 'master_port=', 'menu': 'The port of the master instance [slave command]'},
      \  {'word': 'name=', 'menu': 'A redis config key.'},
      \  {'word': 'slave_mode=', 'menu': 'the mode of the redis instance [slave command]'},
      \  {'word': 'value=', 'menu': 'A redis config value.'},
  \ ],
  \ 'replace': [
      \  {'word': 'backup=', 'menu': 'Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.'},
      \  {'word': 'follow=', 'menu': 'This flag indicates that filesystem links, if they exist, should be followed.'},
      \  {'word': 'group=', 'menu': 'name of the group that should own the file/directory, as would be fed to `chown'''},
      \  {'word': 'mode=', 'menu': 'mode the file or directory should be, such as 0644 as would be fed to `chmod''. As of version 1.8, the mode may be specified as a symbolic mode (for example, `u+rwx'' or `u=rw,g=r,o=r'').'},
      \  {'word': 'others=', 'menu': 'All arguments accepted by the [file] module also work here.'},
      \  {'word': 'owner=', 'menu': 'name of the user that should own the file/directory, as would be fed to `chown'''},
      \  {'word': 'replace=', 'menu': 'The string to replace regexp matches. May contain backreferences that will get expanded with the regexp capture groups if the regexp matches. If not set, matches are removed entirely.'},
      \  {'word': 'selevel=', 'menu': 'level part of the SELinux file context. This is the MLS/MCS attribute, sometimes known as the `range''. `_default'' feature works as for `seuser''.'},
      \  {'word': 'serole=', 'menu': 'role part of SELinux file context, `_default'' feature works as for `seuser''.'},
      \  {'word': 'setype=', 'menu': 'type part of SELinux file context, `_default'' feature works as for `seuser''.'},
      \  {'word': 'seuser=', 'menu': 'user part of SELinux file context. Will default to system policy, if applicable. If set to `_default'', it will use the `user'' portion of the policy if available'},
      \  {'word': 'validate=', 'menu': 'validation to run before copying into place'},
  \ ],
  \ 'rhn_channel': [
      \  {'word': 'state=', 'menu': 'whether the channel should be present or not'},
  \ ],
  \ 'rhn_register': [
      \  {'word': 'activationkey=', 'menu': 'supply an activation key for use with registration'},
      \  {'word': 'channels=', 'menu': 'Optionally specify a list of comma-separated channels to subscribe to upon successful registration.'},
      \  {'word': 'password=', 'menu': 'Red Hat Network password'},
      \  {'word': 'server_url=', 'menu': 'Specify an alternative Red Hat Network server URL'},
      \  {'word': 'state=', 'menu': 'whether to register (`present''), or unregister (`absent'') a system'},
      \  {'word': 'username=', 'menu': 'Red Hat Network username'},
  \ ],
  \ 'riak': [
      \  {'word': 'command=', 'menu': 'The command you would like to perform against the cluster.'},
      \  {'word': 'config_dir=', 'menu': 'The path to the riak configuration directory'},
      \  {'word': 'http_conn=', 'menu': 'The ip address and port that is listening for Riak HTTP queries'},
      \  {'word': 'target_node=', 'menu': 'The target node for certain operations (join, ping)'},
      \  {'word': 'validate_certs=', 'menu': 'If `no'', SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.'},
      \  {'word': 'wait_for_handoffs=', 'menu': 'Number of seconds to wait for handoffs to complete.'},
      \  {'word': 'wait_for_ring=', 'menu': 'Number of seconds to wait for all nodes to agree on the ring.'},
      \  {'word': 'wait_for_service=', 'menu': 'Waits for a riak service to come online before continuing.'},
  \ ],
  \ 'rollbar_deployment': [
      \  {'word': 'comment=', 'menu': 'Deploy comment (e.g. what is being deployed).'},
      \  {'word': 'rollbar_user=', 'menu': 'Rollbar username of the user who deployed.'},
      \  {'word': 'url=', 'menu': 'Optional URL to submit the notification to.'},
      \  {'word': 'user=', 'menu': 'User who deployed.'},
      \  {'word': 'validate_certs=', 'menu': 'If `no'', SSL certificates for the target url will not be validated. This should only be used on personally controlled sites using self-signed certificates.'},
  \ ],
  \ 'route53': [
      \  {'word': 'aws_access_key=', 'menu': 'AWS access key.'},
      \  {'word': 'aws_secret_key=', 'menu': 'AWS secret key.'},
      \  {'word': 'overwrite=', 'menu': 'Whether an existing record should be overwritten on create if values do not match'},
      \  {'word': 'retry_interval=', 'menu': 'In the case that route53 is still servicing a prior request, this module will wait and try again after this many seconds. If you have many domain names, the default of 500 seconds may be too long.'},
      \  {'word': 'ttl=', 'menu': 'The TTL to give the new record'},
      \  {'word': 'value=', 'menu': 'The new value when creating a DNS record.  Multiple comma-spaced values are allowed.  When deleting a record all values for the record must be specified or Route53 will not delete it.'},
  \ ],
  \ 'rpm_key': [
      \  {'word': 'state=', 'menu': 'Wheather the key will be imported or removed from the rpm db.'},
      \  {'word': 'validate_certs=', 'menu': 'If `no'' and the `key'' is a url starting with https, SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.'},
  \ ],
  \ 's3': [
      \  {'word': 'aws_access_key=', 'menu': 'AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used.'},
      \  {'word': 'aws_secret_key=', 'menu': 'AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used.'},
      \  {'word': 'dest=', 'menu': 'The destination file path when downloading an object/key with a GET operation.'},
      \  {'word': 'expiration=', 'menu': 'Time limit (in seconds) for the URL generated and returned by S3/Walrus when performing a mode=put or mode=geturl operation.'},
      \  {'word': 'metadata=', 'menu': 'Metadata for PUT operation, as a dictionary of ''key=value'' and ''key=value,key=value''.'},
      \  {'word': 'object=', 'menu': 'Keyname of the object inside the bucket. Can be used to create "virtual directories", see examples.'},
      \  {'word': 'overwrite=', 'menu': 'Force overwrite either locally on the filesystem or remotely with the object/key. Used with PUT and GET operations.'},
      \  {'word': 'region=', 'menu': 'AWS region to create the bucket in. If not set then the value of the EC2_REGION and AWS_REGION environment variables are checked, followed by the aws_region and ec2_region settings in the Boto config file.  If none of those are set the region defaults to the S3 Location: US Standard.  Prior to ansible 1.8 this parameter could be specified but had no effect.'},
      \  {'word': 's3_url=', 'menu': 'S3 URL endpoint. If not specified then the S3_URL environment variable is used, if that variable is defined. Ansible tries to guess if fakes3 (https://github.com/jubos/fake-s3) or Eucalyptus Walrus (https://github.com/eucalyptus/eucalyptus/wiki/Walrus) is used and configure connection accordingly. Current heuristic is: everything with scheme fakes3:// is fakes3, everything else not ending with amazonaws.com is Walrus.'},
      \  {'word': 'src=', 'menu': 'The source file path when performing a PUT operation.'},
  \ ],
  \ 'script': [
      \  {'word': 'creates=', 'menu': 'a filename, when it already exists, this step will *not* be run.'},
      \  {'word': 'removes=', 'menu': 'a filename, when it does not exist, this step will *not* be run.'},
  \ ],
  \ 'seboolean': [
      \  {'word': 'persistent=', 'menu': 'Set to `yes'' if the boolean setting should survive a reboot'},
  \ ],
  \ 'selinux': [
      \  {'word': 'conf=', 'menu': 'path to the SELinux configuration file, if non-standard'},
      \  {'word': 'policy=', 'menu': 'name of the SELinux policy to use (example: `targeted'') will be required if state is not `disabled'''},
  \ ],
  \ 'service': [
      \  {'word': 'arguments=', 'menu': 'Additional arguments provided on the command line'},
      \  {'word': 'enabled=', 'menu': 'Whether the service should start on boot. *At least one of state and enabled are required.*'},
      \  {'word': 'pattern=', 'menu': 'If the service does not respond to the status command, name a substring to look for as would be found in the output of the `ps'' command as a stand-in for a status result.  If the string is found, the service will be assumed to be running.'},
      \  {'word': 'runlevel=', 'menu': 'For OpenRC init scripts (ex: Gentoo) only.  The runlevel that this service belongs to.'},
      \  {'word': 'sleep=', 'menu': 'If the service is being `restarted'' then sleep this many seconds between the stop and start command. This helps to workaround badly behaving init scripts that exit immediately after signaling a process to stop.'},
      \  {'word': 'state=', 'menu': '`started''/`stopped'' are idempotent actions that will not run commands unless necessary.  `restarted'' will always bounce the service.  `reloaded'' will always reload. *At least one of state and enabled are required.*'},
  \ ],
  \ 'set_fact': [
  \ ],
  \ 'setup': [
      \  {'word': 'fact_path=', 'menu': 'path used for local ansible facts (*.fact) - files in this dir will be run (if executable) and their results be added to ansible_local facts if a file is not executable it is read. File/results format can be json or ini-format'},
      \  {'word': 'filter=', 'menu': 'if supplied, only return facts that match this shell-style (fnmatch) wildcard.'},
  \ ],
  \ 'shell': [
      \  {'word': 'chdir=', 'menu': 'cd into this directory before running the command'},
      \  {'word': 'creates=', 'menu': 'a filename, when it already exists, this step will *not* be run.'},
      \  {'word': 'executable=', 'menu': 'change the shell used to execute the command. Should be an absolute path to the executable.'},
      \  {'word': 'removes=', 'menu': 'a filename, when it does not exist, this step will *not* be run.'},
      \  {'word': 'warn=', 'menu': 'if command warnings are on in ansible.cfg, do not warn about this particular line if set to no/false.'},
  \ ],
  \ 'slack': [
      \  {'word': 'channel=', 'menu': 'Channel to send the message to. If absent, the message goes to the channel selected for the `token''.'},
      \  {'word': 'icon_emoji=', 'menu': 'Emoji for the message sender. See Slack documentation for options. (if `icon_emoji'' is set, `icon_url'' will not be used)'},
      \  {'word': 'icon_url=', 'menu': 'Url for the message sender''s icon (default `http://www.ansible.com/favicon.ico'')'},
      \  {'word': 'link_names=', 'menu': 'Automatically create links for channels and usernames in `msg''.'},
      \  {'word': 'parse=', 'menu': 'Setting for the message parser at Slack'},
      \  {'word': 'username=', 'menu': 'This is the sender of the message.'},
      \  {'word': 'validate_certs=', 'menu': 'If `no'', SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.'},
  \ ],
  \ 'slurp': [
  \ ],
  \ 'sns': [
      \  {'word': 'aws_access_key=', 'menu': 'AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used.'},
      \  {'word': 'aws_secret_key=', 'menu': 'AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used.'},
      \  {'word': 'email=', 'menu': 'Message to send to email-only subscription'},
      \  {'word': 'http=', 'menu': 'Message to send to HTTP-only subscription'},
      \  {'word': 'https=', 'menu': 'Message to send to HTTPS-only subscription'},
      \  {'word': 'region=', 'menu': 'The AWS region to use. If not specified then the value of the EC2_REGION environment variable, if any, is used.'},
      \  {'word': 'sms=', 'menu': 'Message to send to SMS-only subscription'},
      \  {'word': 'sqs=', 'menu': 'Message to send to SQS-only subscription'},
      \  {'word': 'subject=', 'menu': 'Subject line for email delivery.'},
  \ ],
  \ 'stat': [
      \  {'word': 'follow=', 'menu': 'Whether to follow symlinks'},
      \  {'word': 'get_checksum=', 'menu': 'Whether to return a checksum of the file (currently sha1)'},
      \  {'word': 'get_md5=', 'menu': 'Whether to return the md5 sum of the file.  Will return None if we''re unable to use md5 (Common for FIPS-140 compliant systems)'},
  \ ],
  \ 'subversion': [
      \  {'word': 'executable=', 'menu': 'Path to svn executable to use. If not supplied, the normal mechanism for resolving binary paths will be used.'},
      \  {'word': 'export=', 'menu': 'If `yes'', do export instead of checkout/update.'},
      \  {'word': 'force=', 'menu': 'If `yes'', modified files will be discarded. If `no'', module will fail if it encounters modified files.'},
      \  {'word': 'password=', 'menu': '--password parameter passed to svn.'},
      \  {'word': 'revision=', 'menu': 'Specific revision to checkout.'},
      \  {'word': 'username=', 'menu': '--username parameter passed to svn.'},
  \ ],
  \ 'supervisorctl': [
      \  {'word': 'config=', 'menu': 'The supervisor configuration file path'},
      \  {'word': 'password=', 'menu': 'password to use for authentication'},
      \  {'word': 'server_url=', 'menu': 'URL on which supervisord server is listening'},
      \  {'word': 'supervisorctl_path=', 'menu': 'path to supervisorctl executable'},
      \  {'word': 'username=', 'menu': 'username to use for authentication'},
  \ ],
  \ 'svr4pkg': [
      \  {'word': 'category=', 'menu': 'Install/Remove category instead of a single package.'},
      \  {'word': 'proxy=', 'menu': 'HTTP[s] proxy to be used if `src'' is a URL.'},
      \  {'word': 'response_file=', 'menu': 'Specifies the location of a response file to be used if package expects input on install. (added in Ansible 1.4)'},
      \  {'word': 'src=', 'menu': 'Specifies the location to install the package from. Required when `state=present''. Can be any path acceptable to the `pkgadd'' command''s `-d'' option. e.g.: `somefile.pkg'', `/dir/with/pkgs'', `http:/server/mypkgs.pkg''. If using a file or directory, they must already be accessible by the host. See the [copy] module for a way to get them there.'},
      \  {'word': 'zone=', 'menu': 'Whether to install the package only in the current zone, or install it into all zones. The installation into all zones works only if you are working with the global zone.'},
  \ ],
  \ 'swdepot': [
      \  {'word': 'depot=', 'menu': 'The source repository from which install or upgrade a package.'},
  \ ],
  \ 'synchronize': [
      \  {'word': 'archive=', 'menu': 'Mirrors the rsync archive flag, enables recursive, links, perms, times, owner, group flags and -D.'},
      \  {'word': 'checksum=', 'menu': 'Skip based on checksum, rather than mod-time & size; Note that that "archive" option is still enabled by default - the "checksum" option will not disable it.'},
      \  {'word': 'compress=', 'menu': 'Compress file data during the transfer. In most cases, leave this enabled unless it causes problems.'},
      \  {'word': 'copy_links=', 'menu': 'Copy symlinks as the item that they point to (the referent) is copied, rather than the symlink.'},
      \  {'word': 'delete=', 'menu': 'Delete files that don''t exist (after transfer, not before) in the `src'' path. This option requires `recursive=yes''.'},
      \  {'word': 'dest_port=', 'menu': 'Port number for ssh on the destination host. The ansible_ssh_port inventory var takes precedence over this value.'},
      \  {'word': 'dirs=', 'menu': 'Transfer directories without recursing'},
      \  {'word': 'existing_only=', 'menu': 'Skip creating new files on receiver.'},
      \  {'word': 'group=', 'menu': 'Preserve group'},
      \  {'word': 'links=', 'menu': 'Copy symlinks as symlinks.'},
      \  {'word': 'mode=', 'menu': 'Specify the direction of the synchronization. In push mode the localhost or delegate is the source; In pull mode the remote host in context is the source.'},
      \  {'word': 'owner=', 'menu': 'Preserve owner (super user only)'},
      \  {'word': 'perms=', 'menu': 'Preserve permissions.'},
      \  {'word': 'recursive=', 'menu': 'Recurse into directories.'},
      \  {'word': 'rsync_opts=', 'menu': 'Specify additional rsync options by passing in an array.'},
      \  {'word': 'rsync_path=', 'menu': 'Specify the rsync command to run on the remote machine. See `--rsync-path'' on the rsync man page.'},
      \  {'word': 'rsync_timeout=', 'menu': 'Specify a --timeout for the rsync command in seconds.'},
      \  {'word': 'set_remote_user=', 'menu': 'put user@ for the remote paths. If you have a custom ssh config to define the remote user for a host that does not match the inventory user, you should set this parameter to "no".'},
      \  {'word': 'times=', 'menu': 'Preserve modification times'},
  \ ],
  \ 'sysctl': [
      \  {'word': 'ignoreerrors=', 'menu': 'Use this option to ignore errors about unknown keys.'},
      \  {'word': 'reload=', 'menu': 'If `yes'', performs a `/sbin/sysctl -p'' if the `sysctl_file'' is updated. If `no'', does not reload `sysctl'' even if the `sysctl_file'' is updated.'},
      \  {'word': 'state=', 'menu': 'Whether the entry should be present or absent in the sysctl file.'},
      \  {'word': 'sysctl_file=', 'menu': 'Specifies the absolute path to `sysctl.conf'', if not `/etc/sysctl.conf''.'},
      \  {'word': 'sysctl_set=', 'menu': 'Verify token value with the sysctl command and set with -w if necessary'},
      \  {'word': 'value=', 'menu': 'Desired value of the sysctl key.'},
  \ ],
  \ 'template': [
      \  {'word': 'backup=', 'menu': 'Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.'},
      \  {'word': 'follow=', 'menu': 'This flag indicates that filesystem links, if they exist, should be followed.'},
      \  {'word': 'group=', 'menu': 'name of the group that should own the file/directory, as would be fed to `chown'''},
      \  {'word': 'mode=', 'menu': 'mode the file or directory should be, such as 0644 as would be fed to `chmod''. As of version 1.8, the mode may be specified as a symbolic mode (for example, `u+rwx'' or `u=rw,g=r,o=r'').'},
      \  {'word': 'owner=', 'menu': 'name of the user that should own the file/directory, as would be fed to `chown'''},
      \  {'word': 'selevel=', 'menu': 'level part of the SELinux file context. This is the MLS/MCS attribute, sometimes known as the `range''. `_default'' feature works as for `seuser''.'},
      \  {'word': 'serole=', 'menu': 'role part of SELinux file context, `_default'' feature works as for `seuser''.'},
      \  {'word': 'setype=', 'menu': 'type part of SELinux file context, `_default'' feature works as for `seuser''.'},
      \  {'word': 'seuser=', 'menu': 'user part of SELinux file context. Will default to system policy, if applicable. If set to `_default'', it will use the `user'' portion of the policy if available'},
      \  {'word': 'validate=', 'menu': 'The validation command to run before copying into place. The path to the file to validate is passed in via ''%s'' which must be present as in the visudo example below. validation to run before copying into place. The command is passed securely so shell features like expansion and pipes won''t work.'},
  \ ],
  \ 'twilio': [
  \ ],
  \ 'typetalk': [
  \ ],
  \ 'ufw': [
      \  {'word': 'delete=', 'menu': 'Delete rule.'},
      \  {'word': 'direction=', 'menu': 'Select direction for a rule or default policy command.'},
      \  {'word': 'from_ip=', 'menu': 'Source IP address.'},
      \  {'word': 'from_port=', 'menu': 'Source port.'},
      \  {'word': 'insert=', 'menu': 'Insert the corresponding rule as rule number NUM'},
      \  {'word': 'interface=', 'menu': 'Specify interface for rule.'},
      \  {'word': 'log=', 'menu': 'Log new connections matched to this rule'},
      \  {'word': 'logging=', 'menu': 'Toggles logging. Logged packets use the LOG_KERN syslog facility.'},
      \  {'word': 'name=', 'menu': 'Use profile located in `/etc/ufw/applications.d'''},
      \  {'word': 'policy=', 'menu': 'Change the default policy for incoming or outgoing traffic.'},
      \  {'word': 'proto=', 'menu': 'TCP/IP protocol.'},
      \  {'word': 'rule=', 'menu': 'Add firewall rule'},
      \  {'word': 'state=', 'menu': '`enabled'' reloads firewall and enables firewall on boot. `disabled'' unloads firewall and disables firewall on boot. `reloaded'' reloads firewall. `reset'' disables and resets firewall to installation defaults.'},
      \  {'word': 'to_ip=', 'menu': 'Destination IP address.'},
      \  {'word': 'to_port=', 'menu': 'Destination port.'},
  \ ],
  \ 'unarchive': [
      \  {'word': 'copy=', 'menu': 'if true, the file is copied from the ''master'' to the target machine, otherwise, the plugin will look for src archive at the target machine.'},
      \  {'word': 'creates=', 'menu': 'a filename, when it already exists, this step will *not* be run.'},
      \  {'word': 'follow=', 'menu': 'This flag indicates that filesystem links, if they exist, should be followed.'},
      \  {'word': 'group=', 'menu': 'name of the group that should own the file/directory, as would be fed to `chown'''},
      \  {'word': 'mode=', 'menu': 'mode the file or directory should be, such as 0644 as would be fed to `chmod''. As of version 1.8, the mode may be specified as a symbolic mode (for example, `u+rwx'' or `u=rw,g=r,o=r'').'},
      \  {'word': 'owner=', 'menu': 'name of the user that should own the file/directory, as would be fed to `chown'''},
      \  {'word': 'selevel=', 'menu': 'level part of the SELinux file context. This is the MLS/MCS attribute, sometimes known as the `range''. `_default'' feature works as for `seuser''.'},
      \  {'word': 'serole=', 'menu': 'role part of SELinux file context, `_default'' feature works as for `seuser''.'},
      \  {'word': 'setype=', 'menu': 'type part of SELinux file context, `_default'' feature works as for `seuser''.'},
      \  {'word': 'seuser=', 'menu': 'user part of SELinux file context. Will default to system policy, if applicable. If set to `_default'', it will use the `user'' portion of the policy if available'},
  \ ],
  \ 'uri': [
      \  {'word': 'HEADER_=', 'menu': 'Any parameter starting with "HEADER_" is a sent with your request as a header. For example, HEADER_Content-Type="application/json" would send the header "Content-Type" along with your request with a value of "application/json".'},
      \  {'word': 'body=', 'menu': 'The body of the http request/response to the web service.'},
      \  {'word': 'creates=', 'menu': 'a filename, when it already exists, this step will not be run.'},
      \  {'word': 'dest=', 'menu': 'path of where to download the file to (if desired). If `dest'' is a directory, the basename of the file on the remote server will be used.'},
      \  {'word': 'follow_redirects=', 'menu': 'Whether or not the URI module should follow redirects. `all'' will follow all redirects. `safe'' will follow only "safe" redirects, where "safe" means that the client is only doing a GET or HEAD on the URI to which it is being redirected. `none'' will not follow any redirects. Note that `yes'' and `no'' choices are accepted for backwards compatibility, where `yes'' is the equivalent of `all'' and `no'' is the equivalent of `safe''. `yes'' and `no'' are deprecated and will be removed in some future version of Ansible.'},
      \  {'word': 'force_basic_auth=', 'menu': 'httplib2, the library used by the uri module only sends authentication information when a webservice responds to an initial request with a 401 status. Since some basic auth services do not properly send a 401, logins will fail. This option forces the sending of the Basic authentication header upon initial request.'},
      \  {'word': 'method=', 'menu': 'The HTTP method of the request or response.'},
      \  {'word': 'others=', 'menu': 'all arguments accepted by the [file] module also work here'},
      \  {'word': 'password=', 'menu': 'password for the module to use for Digest, Basic or WSSE authentication.'},
      \  {'word': 'removes=', 'menu': 'a filename, when it does not exist, this step will not be run.'},
      \  {'word': 'return_content=', 'menu': 'Whether or not to return the body of the request as a "content" key in the dictionary result. If the reported Content-type is "application/json", then the JSON is additionally loaded into a key called `json'' in the dictionary results.'},
      \  {'word': 'status_code=', 'menu': 'A valid, numeric, HTTP status code that signifies success of the request. Can also be comma separated list of status codes.'},
      \  {'word': 'timeout=', 'menu': 'The socket level timeout in seconds'},
      \  {'word': 'user=', 'menu': 'username for the module to use for Digest, Basic or WSSE authentication.'},
  \ ],
  \ 'urpmi': [
      \  {'word': 'force=', 'menu': 'Corresponds to the `--force'' option for `urpmi''.'},
      \  {'word': 'no=-suggests', 'menu': 'Corresponds to the `--no-suggests'' option for `urpmi''.'},
      \  {'word': 'state=', 'menu': 'Indicates the desired package state'},
      \  {'word': 'update_cache=', 'menu': 'update the package database first `urpmi.update -a''.'},
  \ ],
  \ 'user': [
      \  {'word': 'append=', 'menu': 'If `yes'', will only add groups, not set them to just the list in `groups''.'},
      \  {'word': 'comment=', 'menu': 'Optionally sets the description (aka `GECOS'') of user account.'},
      \  {'word': 'createhome=', 'menu': 'Unless set to `no'', a home directory will be made for the user when the account is created or if the home directory does not exist.'},
      \  {'word': 'force=', 'menu': 'When used with `state=absent'', behavior is as with `userdel --force''.'},
      \  {'word': 'generate_ssh_key=', 'menu': 'Whether to generate a SSH key for the user in question. This will *not* overwrite an existing SSH key.'},
      \  {'word': 'group=', 'menu': 'Optionally sets the user''s primary group (takes a group name).'},
      \  {'word': 'groups=', 'menu': 'Puts the user in this comma-delimited list of groups. When set to the empty string (''groups=''), the user is removed from all groups except the primary group.'},
      \  {'word': 'home=', 'menu': 'Optionally set the user''s home directory.'},
      \  {'word': 'login_class=', 'menu': 'Optionally sets the user''s login class for FreeBSD, OpenBSD and NetBSD systems.'},
      \  {'word': 'move_home=', 'menu': 'If set to `yes'' when used with `home='', attempt to move the user''s home directory to the specified directory if it isn''t there already.'},
      \  {'word': 'non_unique=', 'menu': 'Optionally when used with the -u option, this option allows to change the user ID to a non-unique value.'},
      \  {'word': 'password=', 'menu': 'Optionally set the user''s password to this crypted value.  See the user example in the github examples directory for what this looks like in a playbook. The `FAQ <http://docs.ansible.com/faq.html#how-do-i-generate-crypted-passwords-for-the-user-module>`_ contains details on various ways to generate these password values.'},
      \  {'word': 'remove=', 'menu': 'When used with `state=absent'', behavior is as with `userdel --remove''.'},
      \  {'word': 'shell=', 'menu': 'Optionally set the user''s shell.'},
      \  {'word': 'ssh_key_bits=', 'menu': 'Optionally specify number of bits in SSH key to create.'},
      \  {'word': 'ssh_key_comment=', 'menu': 'Optionally define the comment for the SSH key.'},
      \  {'word': 'ssh_key_file=', 'menu': 'Optionally specify the SSH key filename.'},
      \  {'word': 'ssh_key_passphrase=', 'menu': 'Set a passphrase for the SSH key.  If no passphrase is provided, the SSH key will default to having no passphrase.'},
      \  {'word': 'ssh_key_type=', 'menu': 'Optionally specify the type of SSH key to generate. Available SSH key types will depend on implementation present on target host.'},
      \  {'word': 'state=', 'menu': 'Whether the account should exist.  When `absent'', removes the user account.'},
      \  {'word': 'system=', 'menu': 'When creating an account, setting this to `yes'' makes the user a system account.  This setting cannot be changed on existing users.'},
      \  {'word': 'uid=', 'menu': 'Optionally sets the `UID'' of the user.'},
      \  {'word': 'update_password=', 'menu': '`always'' will update passwords if they differ.  `on_create'' will only set the password for newly created users.'},
  \ ],
  \ 'virt': [
      \  {'word': 'command=', 'menu': 'in addition to state management, various non-idempotent commands are available. See examples'},
      \  {'word': 'state=', 'menu': 'Note that there may be some lag for state requests like `shutdown'' since these refer only to VM states. After starting a guest, it may not be immediately accessible.'},
      \  {'word': 'uri=', 'menu': 'libvirt connection uri'},
      \  {'word': 'xml=', 'menu': 'XML document used with the define command'},
  \ ],
  \ 'vsphere_guest': [
      \  {'word': 'cluster=', 'menu': 'The name of the cluster to create the VM in. By default this is derived from the host you tell the module to build the guest on.'},
      \  {'word': 'esxi=', 'menu': 'Dictionary which includes datacenter and hostname on which the VM should be created. For standalone ESXi hosts, ha-datacenter should be used as the datacenter name'},
      \  {'word': 'force=', 'menu': 'Boolean. Allows you to run commands which may alter the running state of a guest. Also used to reconfigure and destroy.'},
      \  {'word': 'resource_pool=', 'menu': 'The name of the resource_pool to create the VM in.'},
      \  {'word': 'state=', 'menu': 'Indicate desired state of the vm.'},
      \  {'word': 'vm_disk=', 'menu': 'A key, value list of disks and their sizes and which datastore to keep it in.'},
      \  {'word': 'vm_extra_config=', 'menu': 'A key, value pair of any extra values you want set or changed in the vmx file of the VM. Useful to set advanced options on the VM.'},
      \  {'word': 'vm_hardware=', 'menu': 'A key, value list of VM config settings. Must include [''memory_mb'', ''num_cpus'', ''osid'', ''scsi''].'},
      \  {'word': 'vm_hw_version=', 'menu': 'Desired hardware version identifier (for example, "vmx-08" for vms that needs to be managed with vSphere Client). Note that changing hardware version of existing vm is not supported.'},
      \  {'word': 'vm_nic=', 'menu': 'A key, value list of nics, their types and what network to put them on.'},
      \  {'word': 'vmware_guest_facts=', 'menu': 'Gather facts from vCenter on a particular VM'},
  \ ],
  \ 'wait_for': [
      \  {'word': 'delay=', 'menu': 'number of seconds to wait before starting to poll'},
      \  {'word': 'exclude_hosts=', 'menu': 'list of hosts or IPs to ignore when looking for active TCP connections for `drained'' state'},
      \  {'word': 'host=', 'menu': 'hostname or IP address to wait for'},
      \  {'word': 'path=', 'menu': 'path to a file on the filesytem that must exist before continuing'},
      \  {'word': 'port=', 'menu': 'port number to poll'},
      \  {'word': 'search_regex=', 'menu': 'Can be used to match a string in either a file or a socket connection. Defaults to a multiline regex.'},
      \  {'word': 'state=', 'menu': 'either `present'', `started'', or `stopped'', `absent'', or `drained'' When checking a port `started'' will ensure the port is open, `stopped'' will check that it is closed, `drained'' will check for active connections When checking for a file or a search string `present'' or `started'' will ensure that the file or string is present before continuing, `absent'' will check that file is absent or removed'},
      \  {'word': 'timeout=', 'menu': 'maximum number of seconds to wait for'},
  \ ],
  \ 'win_feature': [
      \  {'word': 'include_management_tools=', 'menu': 'Adds the corresponding management tools to the specified feature'},
      \  {'word': 'include_sub_features=', 'menu': 'Adds all subfeatures of the specified feature'},
      \  {'word': 'restart=', 'menu': 'Restarts the computer automatically when installation is complete, if restarting is required by the roles or features installed.'},
      \  {'word': 'state=', 'menu': 'State of the features or roles on the system'},
  \ ],
  \ 'win_get_url': [
      \  {'word': 'dest=', 'menu': 'The absolute path of the location to save the file at the URL. Be sure to include a filename and extension as appropriate.'},
  \ ],
  \ 'win_group': [
      \  {'word': 'description=', 'menu': 'Description of the group'},
      \  {'word': 'state=', 'menu': 'Create or remove the group'},
  \ ],
  \ 'win_msi': [
      \  {'word': 'creates=', 'menu': 'Path to a file created by installing the MSI to prevent from attempting to reinstall the package on every run'},
      \  {'word': 'state=', 'menu': 'Whether the MSI file should be installed or uninstalled'},
  \ ],
  \ 'win_ping': [
      \  {'word': 'data=', 'menu': 'Alternate data to return instead of ''pong'''},
  \ ],
  \ 'win_service': [
      \  {'word': 'start_mode=', 'menu': 'Set the startup type for the service'},
      \  {'word': 'state=', 'menu': '`started''/`stopped'' are idempotent actions that will not run commands unless necessary.  `restarted'' will always bounce the service.'},
  \ ],
  \ 'win_stat': [
      \  {'word': 'get_md5=', 'menu': 'Whether to return the md5 sum of the file'},
  \ ],
  \ 'win_user': [
      \  {'word': 'state=', 'menu': 'Whether to create or delete a user'},
  \ ],
  \ 'xattr': [
      \  {'word': 'follow=', 'menu': 'if yes, dereferences symlinks and sets/gets attributes on symlink target, otherwise acts on symlink itself.'},
      \  {'word': 'key=', 'menu': 'The name of a specific Extended attribute key to set/retrieve'},
      \  {'word': 'state=', 'menu': 'defines which state you want to do. `read'' retrieves the current value for a `key'' (default) `present'' sets `name'' to `value'', default if value is set `all'' dumps all data `keys'' retrieves all keys `absent'' deletes the key'},
      \  {'word': 'value=', 'menu': 'The value to set the named name/key to, it automatically sets the `state'' to ''set'''},
  \ ],
  \ 'yum': [
      \  {'word': 'conf_file=', 'menu': 'The remote yum configuration file to use for the transaction.'},
      \  {'word': 'disable_gpg_check=', 'menu': 'Whether to disable the GPG checking of signatures of packages being installed. Has an effect only if state is `present'' or `latest''.'},
      \  {'word': 'disablerepo=', 'menu': '`Repoid'' of repositories to disable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a ",".'},
      \  {'word': 'enablerepo=', 'menu': '`Repoid'' of repositories to enable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a ",".'},
      \  {'word': 'list=', 'menu': 'Various (non-idempotent) commands for usage with `/usr/bin/ansible'' and `not'' playbooks. See examples.'},
      \  {'word': 'state=', 'menu': 'Whether to install (`present'', `latest''), or remove (`absent'') a package.'},
  \ ],
  \ 'zabbix_maintenance': [
      \  {'word': 'collect_data=', 'menu': 'Type of maintenance. With data collection, or without.'},
      \  {'word': 'host_groups=', 'menu': 'Host groups to manage maintenance window for. Separate multiple groups with commas. `host_group'' is an alias for `host_groups''. *Required* option when `state'' is `present'' and no `host_names'' specified.'},
      \  {'word': 'host_names=', 'menu': 'Hosts to manage maintenance window for. Separate multiple hosts with commas. `host_name'' is an alias for `host_names''. *Required* option when `state'' is `present'' and no `host_groups'' specified.'},
      \  {'word': 'minutes=', 'menu': 'Length of maintenance window in minutes.'},
      \  {'word': 'state=', 'menu': 'Create or remove a maintenance window.'},
  \ ],
  \ 'zfs': [
      \  {'word': 'aclinherit=', 'menu': 'The aclinherit property.'},
      \  {'word': 'aclmode=', 'menu': 'The aclmode property.'},
      \  {'word': 'atime=', 'menu': 'The atime property.'},
      \  {'word': 'canmount=', 'menu': 'The canmount property.'},
      \  {'word': 'casesensitivity=', 'menu': 'The casesensitivity property.'},
      \  {'word': 'checksum=', 'menu': 'The checksum property.'},
      \  {'word': 'compression=', 'menu': 'The compression property.'},
      \  {'word': 'copies=', 'menu': 'The copies property.'},
      \  {'word': 'dedup=', 'menu': 'The dedup property.'},
      \  {'word': 'devices=', 'menu': 'The devices property.'},
      \  {'word': 'exec=', 'menu': 'The exec property.'},
      \  {'word': 'jailed=', 'menu': 'The jailed property.'},
      \  {'word': 'logbias=', 'menu': 'The logbias property.'},
      \  {'word': 'mountpoint=', 'menu': 'The mountpoint property.'},
      \  {'word': 'nbmand=', 'menu': 'The nbmand property.'},
      \  {'word': 'normalization=', 'menu': 'The normalization property.'},
      \  {'word': 'primarycache=', 'menu': 'The primarycache property.'},
      \  {'word': 'quota=', 'menu': 'The quota property.'},
      \  {'word': 'readonly=', 'menu': 'The readonly property.'},
      \  {'word': 'recordsize=', 'menu': 'The recordsize property.'},
      \  {'word': 'refquota=', 'menu': 'The refquota property.'},
      \  {'word': 'refreservation=', 'menu': 'The refreservation property.'},
      \  {'word': 'reservation=', 'menu': 'The reservation property.'},
      \  {'word': 'secondarycache=', 'menu': 'The secondarycache property.'},
      \  {'word': 'setuid=', 'menu': 'The setuid property.'},
      \  {'word': 'shareiscsi=', 'menu': 'The shareiscsi property.'},
      \  {'word': 'sharenfs=', 'menu': 'The sharenfs property.'},
      \  {'word': 'sharesmb=', 'menu': 'The sharesmb property.'},
      \  {'word': 'snapdir=', 'menu': 'The snapdir property.'},
      \  {'word': 'sync=', 'menu': 'The sync property.'},
      \  {'word': 'utf8only=', 'menu': 'The utf8only property.'},
      \  {'word': 'volblocksize=', 'menu': 'The volblocksize property.'},
      \  {'word': 'volsize=', 'menu': 'The volsize property.'},
      \  {'word': 'vscan=', 'menu': 'The vscan property.'},
      \  {'word': 'xattr=', 'menu': 'The xattr property.'},
      \  {'word': 'zoned=', 'menu': 'The zoned property.'},
  \ ],
  \ 'zypper': [
      \  {'word': 'disable_gpg_check=', 'menu': 'Whether to disable to GPG signature checking of the package signature being installed. Has an effect only if state is `present'' or `latest''.'},
      \  {'word': 'disable_recommends=', 'menu': 'Corresponds to the `--no-recommends'' option for `zypper''. Default behavior (`yes'') modifies zypper''s default behavior; `no'' does install recommended packages.'},
      \  {'word': 'state=', 'menu': '`present'' will make sure the package is installed. `latest''  will make sure the latest version of the package is installed. `absent''  will make sure the specified package is not installed.'},
  \ ],
  \ 'zypper_repository': [
      \  {'word': 'description=', 'menu': 'A description of the repository'},
      \  {'word': 'disable_gpg_check=', 'menu': 'Whether to disable GPG signature checking of all packages. Has an effect only if state is `present''.'},
      \  {'word': 'name=', 'menu': 'A name for the repository. Not required when adding repofiles.'},
      \  {'word': 'repo=', 'menu': 'URI of the repository or .repo file. Required when state=present.'},
      \  {'word': 'state=', 'menu': 'A source string state.'},
  \ ],
  \ }
