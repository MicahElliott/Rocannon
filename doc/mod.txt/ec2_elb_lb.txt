SYNOPSIS                           *ec2_elb_lb*

New in version 1.5.

Returns information about the load balancer. Will be marked changed when called only if state is changed.

EXAMPLES                           *ec2_elb_lb-examples*
>
    # Note: None of these examples set aws_access_key, aws_secret_key, or region.
    # It is assumed that their matching environment variables are set.
   
    # Basic provisioning example (non-VPC)
   
    - local_action:
        module: ec2_elb_lb
        name: "test-please-delete"
        state: present
        zones:
          - us-east-1a
          - us-east-1d
        listeners:
          - protocol: http # options are http, https, ssl, tcp
            load_balancer_port: 80
            instance_port: 80
          - protocol: https
            load_balancer_port: 443
            instance_protocol: http # optional, defaults to value of protocol setting
            instance_port: 80
            # ssl certificate required for https or ssl
            ssl_certificate_id: "arn:aws:iam::123456789012:server-certificate/company/servercerts/ProdServerCert"
   
    # Internal ELB example
   
    - local_action:
        module: ec2_elb_lb
        name: "test-vpc"
        scheme: internal
        state: present
        subnets:
          - subnet-abcd1234
          - subnet-1a2b3c4d
        listeners:
          - protocol: http # options are http, https, ssl, tcp
            load_balancer_port: 80
            instance_port: 80
   
    # Configure a health check
    - local_action:
        module: ec2_elb_lb
        name: "test-please-delete"
        state: present
        zones:
          - us-east-1d
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 80
        health_check:
            ping_protocol: http # options are http, https, ssl, tcp
            ping_port: 80
            ping_path: "/index.html" # not required for tcp or ssl
            response_timeout: 5 # seconds
            interval: 30 # seconds
            unhealthy_threshold: 2
            healthy_threshold: 10
   
    # Ensure ELB is gone
    - local_action:
        module: ec2_elb_lb
        name: "test-please-delete"
        state: absent
   
    # Normally, this module will purge any listeners that exist on the ELB
    # but aren't specified in the listeners parameter. If purge_listeners is
    # false it leaves them alone
    - local_action:
        module: ec2_elb_lb
        name: "test-please-delete"
        state: present
        zones:
          - us-east-1a
          - us-east-1d
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 80
        purge_listeners: no
   
    # Normally, this module will leave availability zones that are enabled
    # on the ELB alone. If purge_zones is true, then any extreneous zones
    # will be removed
    - local_action:
        module: ec2_elb_lb
        name: "test-please-delete"
        state: present
        zones:
          - us-east-1a
          - us-east-1d
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 80
        purge_zones: yes
   
    # Creates a ELB and assigns a list of subnets to it.
    - local_action:
        module: ec2_elb_lb
        state: present
        name: 'New ELB'
        security_group_ids: 'sg-123456, sg-67890'
        region: us-west-2
        subnets: 'subnet-123456,subnet-67890'
        purge_subnets: yes
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 80
   
    # Create an ELB with connection draining and cross availability
    # zone load balancing
    - local_action:
        module: ec2_elb_lb
        name: "New ELB"
        state: present
        connection_draining_timeout: 60
        cross_az_load_balancing: "yes"
        region: us-east-1
        zones:
          - us-east-1a
          - us-east-1d
        listeners:
          - protocols: http
          - load_balancer_port: 80
          - instance_port: 80
   
      Note
   
      The following environment variables can be used AWS_ACCESS_KEY or EC2_ACCESS_KEY or AWS_ACCESS_KEY_ID, AWS_SECRET_KEY or EC2_SECRET_KEY or AWS_SECRET_ACCESS_KEY, AWS_REGION or EC2_REGION,
      AWS_SECURITY_TOKEN
   
      Note
   
      Ansible uses the boto configuration file (typically ~/.boto) if no credentials are provided. See http://boto.readthedocs.org/en/latest/boto_config_tut.html
   
      Note
   
      AWS_REGION or EC2_REGION can be typically be used to specify the AWS region, when required, but this can also be configured in the boto config file
   
MORE INFO                          *ec2_elb_lb-moreinfo*
>
All arguments are omni-completed, but if you really want to see the online docs:
http://docs.ansible.com/ec2_elb_lb_module.html
