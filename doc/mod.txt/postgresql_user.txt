SYNOPSIS                           *postgresql_user*

Add or remove PostgreSQL users (roles) from a remote host and, optionally, grant the users access to an existing database or tables. The fundamental function of the module is to create, or
delete, roles from a PostgreSQL cluster. Privilege assignment, or removal, is an optional step, which works on one database at a time. This allows for the module to be called several times in
the same module to modify the permissions on different databases, or to grant permissions to already existing users. A user cannot be removed until all the privileges have been stripped from the
user. In such situation, if the module tries to remove the user it will fail. To avoid this from happening the fail_on_user option signals the module to try to remove the user, but if not
possible keep going; the module will report if changes happened and separately if the user was removed or not.

EXAMPLES                           *postgresql_user-examples*
>
    # Create django user and grant access to database and products table
    - postgresql_user: db=acme name=django password=ceec4eif7ya priv=CONNECT/products:ALL
   
    # Create rails user, grant privilege to create other databases and demote rails from super user status
    - postgresql_user: name=rails password=secret role_attr_flags=CREATEDB,NOSUPERUSER
   
    # Remove test user privileges from acme
    - postgresql_user: db=acme name=test priv=ALL/products:ALL state=absent fail_on_user=no
   
    # Remove test user from test database and the cluster
    - postgresql_user: db=test name=test priv=ALL state=absent
   
    # Example privileges string format
    INSERT,UPDATE/table:SELECT/anothertable:ALL
   
    # Remove an existing user's password
    - postgresql_user: db=test user=test password=NULL
   
      Note
   
      The default authentication assumes that you are either logging in as or sudoâ€™ing to the postgres account on the host.
   
      Note
   
      This module uses psycopg2, a Python PostgreSQL database adapter. You must ensure that psycopg2 is installed on the host before using this module. If the remote host is the PostgreSQL server
      (which is the default case), then PostgreSQL must also be installed on the remote host. For Ubuntu-based systems, install the postgresql, libpq-dev, and python-psycopg2 packages on the remote
      host before using this module.
   
      Note
   
      If you specify PUBLIC as the user, then the privilege changes will apply to all users. You may not specify password or role_attr_flags when the PUBLIC user is specified.
   
MORE INFO                          *postgresql_user-moreinfo*
>
All arguments are omni-completed, but if you really want to see the online docs:
http://docs.ansible.com/postgresql_user_module.html
