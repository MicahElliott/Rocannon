SYNOPSIS                           *mysql_user*

Adds or removes a user from a MySQL database.

EXAMPLES                           *mysql_user-examples*
>
    # Create database user with name 'bob' and password '12345' with all database privileges
    - mysql_user: name=bob password=12345 priv=*.*:ALL state=present
   
    # Creates database user 'bob' and password '12345' with all database privileges and 'WITH GRANT OPTION'
    - mysql_user: name=bob password=12345 priv=*.*:ALL,GRANT state=present
   
    # Ensure no user named 'sally' exists, also passing in the auth credentials.
    - mysql_user: login_user=root login_password=123456 name=sally state=absent
   
    # Specify grants composed of more than one word
    - mysql_user: name=replication password=12345 priv=*.*:"REPLICATION CLIENT" state=present
   
    # Revoke all privileges for user 'bob' and password '12345'
    - mysql_user: name=bob password=12345 priv=*.*:USAGE state=present
   
    # Example privileges string format
    mydb.*:INSERT,UPDATE/anotherdb.*:SELECT/yetanotherdb.*:ALL
   
    # Example using login_unix_socket to connect to server
    - mysql_user: name=root password=abc123 login_unix_socket=/var/run/mysqld/mysqld.sock
   
    # Example .my.cnf file for setting the root password
    # Note: don't use quotes around the password, because the mysql_user module
    # will include them in the password but the mysql client will not
   
    [client]
    user=root
    password=n<_665{vS43y
   
      Note
   
      Requires the MySQLdb Python package on the remote host. For Ubuntu, this is as easy as apt-get install python-mysqldb.
   
      Note
   
      Both login_password and login_username are required when you are passing credentials. If none are present, the module will attempt to read the credentials from ~/.my.cnf, and finally fall back
      to using the MySQL default login of ‘root’ with no password.
   
      Note
   
      MySQL server installs with default login_user of ‘root’ and no password. To secure this user as part of an idempotent playbook, you must create at least two tasks: the first must change the root
      user’s password, without providing any login_user/login_password details. The second must drop a ~/.my.cnf file containing the new root credentials. Subsequent runs of the playbook will then
      succeed by reading the new credentials from the file.
   
MORE INFO                          *mysql_user-moreinfo*
>
All arguments are omni-completed, but if you really want to see the online docs:
http://docs.ansible.com/mysql_user_module.html
