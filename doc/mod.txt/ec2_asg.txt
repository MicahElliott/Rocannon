SYNOPSIS                           *ec2_asg*

New in version 1.6.

Can create or delete AWS Autoscaling Groups Works with the ec2_lc module to manage Launch Configurations

EXAMPLES                           *ec2_asg-examples*
>
    # Basic configuration
   
    - ec2_asg:
        name: special
        load_balancers: [ 'lb1', 'lb2' ]
        availability_zones: [ 'eu-west-1a', 'eu-west-1b' ]
        launch_config_name: 'lc-1'
        min_size: 1
        max_size: 10
        desired_capacity: 5
        vpc_zone_identifier: [ 'subnet-abcd1234', 'subnet-1a2b3c4d' ]
        tags:
          - environment: production
            propagate_at_launch: no
   
    # Rolling ASG Updates
   
    Below is an example of how to assign a new launch config to an ASG and terminate old instances.
   
    All instances in "myasg" that do not have the launch configuration named "my_new_lc" will be terminated in
    a rolling fashion with instances using the current launch configuration, "my_new_lc".
   
    This could also be considered a rolling deploy of a pre-baked AMI.
   
    If this is a newly created group, the instances will not be replaced since all instances
    will have the current launch configuration.
   
    - name: create launch config
      ec2_lc:
        name: my_new_lc
        image_id: ami-lkajsf
        key_name: mykey
        region: us-east-1
        security_groups: sg-23423
        instance_type: m1.small
        assign_public_ip: yes
   
    - ec2_asg:
        name: myasg
        launch_config_name: my_new_lc
        health_check_period: 60
        health_check_type: ELB
        replace_all_instances: yes
        min_size: 5
        max_size: 5
        desired_capacity: 5
        region: us-east-1
   
    To only replace a couple of instances instead of all of them, supply a list
    to "replace_instances":
   
    - ec2_asg:
        name: myasg
        launch_config_name: my_new_lc
        health_check_period: 60
        health_check_type: ELB
        replace_instances:
        - i-b345231
        - i-24c2931
        min_size: 5
        max_size: 5
        desired_capacity: 5
        region: us-east-1
   
      Note
   
      The following environment variables can be used AWS_ACCESS_KEY or EC2_ACCESS_KEY or AWS_ACCESS_KEY_ID, AWS_SECRET_KEY or EC2_SECRET_KEY or AWS_SECRET_ACCESS_KEY, AWS_REGION or EC2_REGION,
      AWS_SECURITY_TOKEN
   
      Note
   
      Ansible uses the boto configuration file (typically ~/.boto) if no credentials are provided. See http://boto.readthedocs.org/en/latest/boto_config_tut.html
   
      Note
   
      AWS_REGION or EC2_REGION can be typically be used to specify the AWS region, when required, but this can also be configured in the boto config file
   
MORE INFO                          *ec2_asg-moreinfo*
>
All arguments are omni-completed, but if you really want to see the online docs:
http://docs.ansible.com/ec2_asg_module.html
